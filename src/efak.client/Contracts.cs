//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace efak.client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IClient
    {
        /// <summary>
        /// Get unit of measures
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiGetUnitMeasuresAsync(string? apiKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get unit of measures
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiGetUnitMeasuresAsync(string? apiKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the list of all registerd companies
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiGetAllCompaniesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the list of all registerd companies
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiGetAllCompaniesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the list of all registerd companies
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiDownloadAllCompaniesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the list of all registerd companies
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiDownloadAllCompaniesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Import sales invoice by uploading Ubl file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<MiniInvoiceDto>> ApiPublicApiSalesInvoiceUblUploadAsync(string? apiKey, string? requestId, SendToCir? sendToCir, FileParameter ublFile);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import sales invoice by uploading Ubl file
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<MiniInvoiceDto>> ApiPublicApiSalesInvoiceUblUploadAsync(string? apiKey, string? requestId, SendToCir? sendToCir, FileParameter ublFile, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Import sales ubl
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<MiniInvoiceDto>> ApiPublicApiSalesInvoiceUblAsync(string? apiKey, string? requestId, SendToCir? sendToCir, string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import sales ubl
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<MiniInvoiceDto>> ApiPublicApiSalesInvoiceUblAsync(string? apiKey, string? requestId, SendToCir? sendToCir, string body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get sales invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<SimpleSalesInvoiceDto>> ApiPublicApiSalesInvoiceGetAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<SimpleSalesInvoiceDto>> ApiPublicApiSalesInvoiceGetAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete only draft or new sales invoices, other invoices are ignored.
        /// </summary>
        /// <remarks>
        /// Sample Request: [ salesInvoiceId1, salesInvoiceId2, salesInvoiceId3 ]
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<long>>> ApiPublicApiSalesInvoiceDeleteAsync(string? apiKey, System.Collections.Generic.IEnumerable<long>? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete only draft or new sales invoices, other invoices are ignored.
        /// </summary>
        /// <remarks>
        /// Sample Request: [ salesInvoiceId1, salesInvoiceId2, salesInvoiceId3 ]
        /// </remarks>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<long>>> ApiPublicApiSalesInvoiceDeleteAsync(string? apiKey, System.Collections.Generic.IEnumerable<long>? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get sales invoice signature
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiSalesInvoiceSignatureAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales invoice signature
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiSalesInvoiceSignatureAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<InvoiceDto>> ApiPublicApiSalesInvoiceCancelAsync(string? apiKey, CancelInvoiceMessageDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<InvoiceDto>> ApiPublicApiSalesInvoiceCancelAsync(string? apiKey, CancelInvoiceMessageDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Invoice Storno Cancellation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<InvoiceDto>> ApiPublicApiSalesInvoiceStornoAsync(string? apiKey, StornoInvoiceMessageDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invoice Storno Cancellation
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<InvoiceDto>> ApiPublicApiSalesInvoiceStornoAsync(string? apiKey, StornoInvoiceMessageDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get purchase invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<SimplePurchaseInvoiceDto>> ApiPublicApiPurchaseInvoiceAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get purchase invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<SimplePurchaseInvoiceDto>> ApiPublicApiPurchaseInvoiceAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download sales invoice ubl as FileStream
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiSalesInvoiceXmlAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download sales invoice ubl as FileStream
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiSalesInvoiceXmlAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search for all sales invoices which status changed on specific date
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<SalesInvoiceStatusChangeDto>>> ApiPublicApiSalesInvoiceChangesAsync(string? apiKey, System.DateTime? date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for all sales invoices which status changed on specific date
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<SalesInvoiceStatusChangeDto>>> ApiPublicApiSalesInvoiceChangesAsync(string? apiKey, System.DateTime? date, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get list of all exemption reasons
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<ValueAddedTaxExemptionReasonDto>>> ApiPublicApiSalesInvoiceGetValueAddedTaxExemptionReasonListAsync(string? apiKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of all exemption reasons
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<ValueAddedTaxExemptionReasonDto>>> ApiPublicApiSalesInvoiceGetValueAddedTaxExemptionReasonListAsync(string? apiKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get sales invoice IDs
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<SalesInvoicesDto>> ApiPublicApiSalesInvoiceIdsAsync(string? apiKey, SalesInvoiceStatusFilter? status, System.DateTime? dateFrom, System.DateTime? dateTo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales invoice IDs
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<SalesInvoicesDto>> ApiPublicApiSalesInvoiceIdsAsync(string? apiKey, SalesInvoiceStatusFilter? status, System.DateTime? dateFrom, System.DateTime? dateTo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete only draft or new sales invoices, other invoices cannot be deleted
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<long>> ApiPublicApiSalesInvoiceDeleteAsync(string? apiKey, long invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete only draft or new sales invoices, other invoices cannot be deleted
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<long>> ApiPublicApiSalesInvoiceDeleteAsync(string? apiKey, long invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search for all purchase invoices which status changed on specific date
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<PurchaseInvoiceStatusChangeDto>>> ApiPublicApiPurchaseInvoiceChangesAsync(string? apiKey, System.DateTime? date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for all purchase invoices which status changed on specific date
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<PurchaseInvoiceStatusChangeDto>>> ApiPublicApiPurchaseInvoiceChangesAsync(string? apiKey, System.DateTime? date, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download purchase invoice ubl as FileStream
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPurchaseInvoiceXmlAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download purchase invoice ubl as FileStream
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPurchaseInvoiceXmlAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Accept or reject purchase invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<AcceptRejectResponse>> ApiPublicApiPurchaseInvoiceAcceptRejectPurchaseInvoiceAsync(string? apiKey, AcceptRejectPurchaseInvoice? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Accept or reject purchase invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<AcceptRejectResponse>> ApiPublicApiPurchaseInvoiceAcceptRejectPurchaseInvoiceAsync(string? apiKey, AcceptRejectPurchaseInvoice? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get purchase invoice signature
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPurchaseInvoiceSignatureAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get purchase invoice signature
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPurchaseInvoiceSignatureAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get purchase invoice IDs
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<PurchaseInvoicesDto>> ApiPublicApiPurchaseInvoiceIdsAsync(string? apiKey, PurchaseInvoiceStatusFilter? status, System.DateTime? dateFrom, System.DateTime? dateTo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get purchase invoice IDs
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<PurchaseInvoicesDto>> ApiPublicApiPurchaseInvoiceIdsAsync(string? apiKey, PurchaseInvoiceStatusFilter? status, System.DateTime? dateFrom, System.DateTime? dateTo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Subscribe for the next day to receive invoice status change notifications
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<string>> ApiPublicApiSubscribeAsync(string? apiKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Subscribe for the next day to receive invoice status change notifications
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<string>> ApiPublicApiSubscribeAsync(string? apiKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Records VAT on specified invoice calculated by receiver, for invoice with VAT reverse charge
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPurchaseInvoiceVatReverseChargeAsync(string? apiKey, VatReverseChargeDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Records VAT on specified invoice calculated by receiver, for invoice with VAT reverse charge
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPurchaseInvoiceVatReverseChargeAsync(string? apiKey, VatReverseChargeDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Record group vat, do a correction for previous group vat record if exist
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<GroupVatDto>> ApiPublicApiVatRecordingGroupPostAsync(string? apiKey, int? groupVatId, GroupVatAddDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Record group vat, do a correction for previous group vat record if exist
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<GroupVatDto>> ApiPublicApiVatRecordingGroupPostAsync(string? apiKey, int? groupVatId, GroupVatAddDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get group vat recordings and filter old records by last modified date and new ones by status change date
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<GroupVatListDto>>> ApiPublicApiVatRecordingGroupGetAsync(string? apiKey, System.DateTime? dateFrom, System.DateTime? dateTo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get group vat recordings and filter old records by last modified date and new ones by status change date
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<GroupVatListDto>>> ApiPublicApiVatRecordingGroupGetAsync(string? apiKey, System.DateTime? dateFrom, System.DateTime? dateTo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel all versions of group vat recording
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<int>> ApiPublicApiVatRecordingGroupCancelAsync(string? apiKey, int groupVatId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel all versions of group vat recording
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<int>> ApiPublicApiVatRecordingGroupCancelAsync(string? apiKey, int groupVatId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get group vat recording by id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<GroupVatDto>> ApiPublicApiVatRecordingGroupGetAsync(string? apiKey, int groupVatId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get group vat recording by id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<GroupVatDto>> ApiPublicApiVatRecordingGroupGetAsync(string? apiKey, int groupVatId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Record individual vat, do a correction for previous group vat record if exist
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<IndividualVatDto>> ApiPublicApiVatRecordingIndividualPostAsync(string? apiKey, int? individualVatId, IndividualVatAddDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Record individual vat, do a correction for previous group vat record if exist
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<IndividualVatDto>> ApiPublicApiVatRecordingIndividualPostAsync(string? apiKey, int? individualVatId, IndividualVatAddDto? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get individual vat recordings and filter old records by last modified date and new ones by status change date
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<IndividualVatListDto>>> ApiPublicApiVatRecordingIndividualGetAsync(string? apiKey, System.DateTime? dateFrom, System.DateTime? dateTo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get individual vat recordings and filter old records by last modified date and new ones by status change date
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<IndividualVatListDto>>> ApiPublicApiVatRecordingIndividualGetAsync(string? apiKey, System.DateTime? dateFrom, System.DateTime? dateTo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel all versions of individual vat recording
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<int>> ApiPublicApiVatRecordingIndividualCancelAsync(string? apiKey, int individualVatId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel all versions of individual vat recording
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<int>> ApiPublicApiVatRecordingIndividualCancelAsync(string? apiKey, int individualVatId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get individual vat recording by id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<IndividualVatDto>> ApiPublicApiVatRecordingIndividualGetAsync(string? apiKey, int individualVatId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get individual vat recording by id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<IndividualVatDto>> ApiPublicApiVatRecordingIndividualGetAsync(string? apiKey, int individualVatId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Search for all invoices which status changed on specific date and company is public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<PurchaseInvoiceStatusChangeDto>>> ApiPublicApiPublicPurchaseContractorInvoiceChangesAsync(string? apiKey, System.DateTime? date);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for all invoices which status changed on specific date and company is public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<System.Collections.Generic.ICollection<PurchaseInvoiceStatusChangeDto>>> ApiPublicApiPublicPurchaseContractorInvoiceChangesAsync(string? apiKey, System.DateTime? date, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download purchase invoice ubl as FileStream where company is public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPublicPurchaseContractorInvoiceXmlAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download purchase invoice ubl as FileStream where company is public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPublicPurchaseContractorInvoiceXmlAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get purchase invoice for public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<SimplePurchaseInvoiceDto>> ApiPublicApiPublicPurchaseContractorInvoiceAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get purchase invoice for public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<SimplePurchaseInvoiceDto>> ApiPublicApiPublicPurchaseContractorInvoiceAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get public purchase invoice signature for public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPublicPurchaseContractorInvoiceSignatureAsync(string? apiKey, long? invoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get public purchase invoice signature for public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPublicPurchaseContractorInvoiceSignatureAsync(string? apiKey, long? invoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get purchase invoice IDs for public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<PurchaseInvoicesDto>> ApiPublicApiPublicPurchaseContractorInvoiceIdsAsync(string? apiKey, PurchaseInvoiceStatusFilter? status, System.DateTime? dateFrom, System.DateTime? dateTo);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get purchase invoice IDs for public purchase contract signer
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<PurchaseInvoicesDto>> ApiPublicApiPublicPurchaseContractorInvoiceIdsAsync(string? apiKey, PurchaseInvoiceStatusFilter? status, System.DateTime? dateFrom, System.DateTime? dateTo, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all tickets by CIR invoice Id on from CIR
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirTicketListResponse>> ApiPublicApiCirTicketsAsync(string? apiKey, string? cirInvoiceId, bool onlyActiveTickets);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all tickets by CIR invoice Id on from CIR
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirTicketListResponse>> ApiPublicApiCirTicketsAsync(string? apiKey, string? cirInvoiceId, bool onlyActiveTickets, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets all tickets from CIR
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirTicketListResponse>> ApiPublicApiCirTicketsFindAsync(string? apiKey, CirTicketSearchParameter? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets all tickets from CIR
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirTicketListResponse>> ApiPublicApiCirTicketsFindAsync(string? apiKey, CirTicketSearchParameter? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Creates new ticket on CIR
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<int>> ApiPublicApiCirTicketsAddCirTicketAsync(string? apiKey, AddCirTicketRequest? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates new ticket on CIR
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<int>> ApiPublicApiCirTicketsAddCirTicketAsync(string? apiKey, AddCirTicketRequest? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get cir ticket history by CIR ticket Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirTicketHistoryDto>> ApiPublicApiCirTicketsGetCirTicketHistoryAsync(string? apiKey, int cirTicketId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get cir ticket history by CIR ticket Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirTicketHistoryDto>> ApiPublicApiCirTicketsGetCirTicketHistoryAsync(string? apiKey, int cirTicketId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get sales invoice assignation history by CIR invoice Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<InvoiceHistoryDto>> ApiPublicApiSalesCirInvoiceGetSalesInvoiceAssignationHistoryAsync(string? apiKey, string? cirInvoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sales invoice assignation history by CIR invoice Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<InvoiceHistoryDto>> ApiPublicApiSalesCirInvoiceGetSalesInvoiceAssignationHistoryAsync(string? apiKey, string? cirInvoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get invoice payments and history from sales side by CIR invoice Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirHistoryDto>> ApiPublicApiSalesCirInvoiceGetInvoicePaymentsAndHistoryAsync(string? apiKey, string? cirInvoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get invoice payments and history from sales side by CIR invoice Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirHistoryDto>> ApiPublicApiSalesCirInvoiceGetInvoicePaymentsAndHistoryAsync(string? apiKey, string? cirInvoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Download purchase invoice ubl as FileStream by CIR invoice id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPurchaseInvoiceUblAsync(string? apiKey, string? cirInvoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Download purchase invoice ubl as FileStream by CIR invoice id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiPurchaseInvoiceUblAsync(string? apiKey, string? cirInvoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Assign Cir invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<PurchaseInvoiceDto>> ApiPublicApiPurchaseInvoiceAssignAsync(string? apiKey, string? cirInvoiceId, string? assignerPartyJBKJS, string? assignationContractNumber);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign Cir invoice
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<PurchaseInvoiceDto>> ApiPublicApiPurchaseInvoiceAssignAsync(string? apiKey, string? cirInvoiceId, string? assignerPartyJBKJS, string? assignationContractNumber, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Cancel Cir invoice assignment
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<PurchaseInvoiceDto>> ApiPublicApiPurchaseInvoiceCancelassignAsync(string? apiKey, string? cirInvoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel Cir invoice assignment
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<PurchaseInvoiceDto>> ApiPublicApiPurchaseInvoiceCancelassignAsync(string? apiKey, string? cirInvoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Accept or reject purchase invoice by CIR invoice id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<AcceptRejectPurchaseInvoiceResponse>> ApiPublicApiPurchaseInvoiceAcceptRejectPurchaseInvoiceByCirInvoiceIdAsync(string? apiKey, AcceptRejectPurchaseInvoiceByCirInvoiceId? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Accept or reject purchase invoice by CIR invoice id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<AcceptRejectPurchaseInvoiceResponse>> ApiPublicApiPurchaseInvoiceAcceptRejectPurchaseInvoiceByCirInvoiceIdAsync(string? apiKey, AcceptRejectPurchaseInvoiceByCirInvoiceId? body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get purchase invoice assignation history by CIR invoice Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<InvoiceHistoryDto>> ApiPublicApiPurchaseCirInvoiceGetPurchaseInvoiceAssignationHistoryAsync(string? apiKey, string? cirInvoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get purchase invoice assignation history by CIR invoice Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<InvoiceHistoryDto>> ApiPublicApiPurchaseCirInvoiceGetPurchaseInvoiceAssignationHistoryAsync(string? apiKey, string? cirInvoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get invoice payments and history from purchase side by CIR invoice Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirHistoryDto>> ApiPublicApiPurchaseCirInvoiceGetInvoicePaymentsAndHistoryAsync(string? apiKey, string? cirInvoiceId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get invoice payments and history from purchase side by CIR invoice Id
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CirHistoryDto>> ApiPublicApiPurchaseCirInvoiceGetInvoicePaymentsAndHistoryAsync(string? apiKey, string? cirInvoiceId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update Company information
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiCompanyUpdateCompanyAsync(string? apiKey);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update Company information
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> ApiPublicApiCompanyUpdateCompanyAsync(string? apiKey, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check if company has eFaktura account
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CompanyAccountOnEfAkturaDto>> ApiPublicApiCompanyCheckIfCompanyRegisteredOnEfakturaAsync(CompanyAccountIdentificationDto? body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if company has eFaktura account
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="EFakturaException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response<CompanyAccountOnEfAkturaDto>> ApiPublicApiCompanyCheckIfCompanyRegisteredOnEfakturaAsync(CompanyAccountIdentificationDto? body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SendToCir
    {

        [System.Runtime.Serialization.EnumMember(Value = @"No")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Yes")]
        Yes = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MiniInvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long PurchaseInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long SalesInvoiceId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MiniInvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MiniInvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SalesInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Paid")]
        Paid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Mistake")]
        Mistake = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OverDue")]
        OverDue = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Archived")]
        Archived = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Sending")]
        Sending = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Storno")]
        Storno = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 13,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CirInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ActiveCir")]
        ActiveCir = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidCir")]
        InvalidCir = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CancelledCir")]
        CancelledCir = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySettled")]
        PartiallySettled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Settled")]
        Settled = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Assigned")]
        Assigned = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Proinvoice")]
        Proinvoice = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"CIRStatusSyncError")]
        CIRStatusSyncError = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimpleSalesInvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SalesInvoiceStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("globUniqId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? GlobUniqId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirInvoiceStatus CirStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime LastModifiedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirSettledAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double CirSettledAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatNumberFactoringCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatNumberFactoringCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FactoringContractNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelComment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CancelComment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stornoComment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StornoComment { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SimpleSalesInvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SimpleSalesInvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CancelInvoiceMessageDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelComments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CancelComments { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CancelInvoiceMessageDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CancelInvoiceMessageDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Languages
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cs_CZ")]
        Cs_CZ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"de_DE")]
        De_DE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"et_EE")]
        Et_EE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"en_US")]
        En_US = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"fi_FI")]
        Fi_FI = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"lt_LT")]
        Lt_LT = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"lv_LV")]
        Lv_LV = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ru_RU")]
        Ru_RU = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"sk_SK")]
        Sk_SK = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"sr_SC")]
        Sr_SC = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"sr_SL")]
        Sr_SL = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"hu_HU")]
        Hu_HU = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"pl_PL")]
        Pl_PL = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"bg_BG")]
        Bg_BG = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"hr_HR")]
        Hr_HR = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"sl_SI")]
        Sl_SI = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SspCustomerSupplierDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerSupplierId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CustomerSupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownerCompanyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? OwnerCompanyId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CountryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? CompanyName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? RegistrationCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRegistrationCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? VatRegistrationCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personalId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PersonalId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? PhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyMail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? CompanyMail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("language")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Languages Language { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalCode { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SspCustomerSupplierDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SspCustomerSupplierDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SspAddressDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int AddressId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("streetAndHouse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? StreetAndHouse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postalIndex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? PostalIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("city")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? City { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CountryId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SspAddressDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SspAddressDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContractCustomFieldDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Value { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ContractCustomFieldDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ContractCustomFieldDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContractApplicationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("contractApplicationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ContractApplicationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RegistrationCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRegistrationCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatRegistrationCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SspAddressDto>? Addresses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Channel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ChannelAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNotificationEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNotificationEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceProvider")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceProvider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentTerms")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? PaymentTerms { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fineRatePerDay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? FineRatePerDay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNr")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReferenceNr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contractDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime ContractDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyLabel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverCompanyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReceiverCompanyId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ContractApplicationDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ContractApplicationDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SspContractDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("contractId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ContractId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customerSupplier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public SspCustomerSupplierDto CustomerSupplier { get; set; } = new SspCustomerSupplierDto();

        [System.Text.Json.Serialization.JsonPropertyName("customerSupplierId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CustomerSupplierId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentTerms")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0, 9999)]
        public int? PaymentTerms { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fineRatePerDay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 9999D)]
        public double? FineRatePerDay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ServiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNr")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? ReferenceNr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? ContactPersonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonMail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string? ContactPersonMail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contractDesc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContractDesc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SspAddressDto>? Addresses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ContractCustomFieldDto>? CustomFields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<int>? Channels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDeleted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownerCompanyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? OwnerCompanyId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Channel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ChannelAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceProvider")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceProvider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contractNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ContractNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNotificationEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNotificationEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceCurrency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string? InvoiceCurrency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isBudgetClient")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsBudgetClient { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendInvoiceToCir")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SendInvoiceToCir { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("availableContracts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string>? AvailableContracts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contractApplication")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ContractApplicationDto ContractApplication { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SspContractDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SspContractDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SspBankAccountDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int BankAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iban")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Iban { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("swift")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Swift { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPrimary")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrimary { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unifiedBankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UnifiedBankAccount { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SspBankAccountDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SspBankAccountDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SspEmailDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isActivated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsActivated { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activationToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ActivationToken { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SspEmailDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SspEmailDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SspModules
    {

        [System.Runtime.Serialization.EnumMember(Value = @"root")]
        Root = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dashboard")]
        Dashboard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"salesInvoices")]
        SalesInvoices = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"salesInvoiceNew")]
        SalesInvoiceNew = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"salesInvoiceEdit")]
        SalesInvoiceEdit = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"salesInvoicePreview")]
        SalesInvoicePreview = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"salesInvoiceView")]
        SalesInvoiceView = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"purchases")]
        Purchases = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseInvoiceEdit")]
        PurchaseInvoiceEdit = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseInvoicePublic")]
        PurchaseInvoicePublic = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"settings")]
        Settings = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"login")]
        Login = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"myDetails")]
        MyDetails = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"usersList")]
        UsersList = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"userEdit")]
        UserEdit = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"registers")]
        Registers = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"billing")]
        Billing = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"companyDetails")]
        CompanyDetails = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"contactsList")]
        ContactsList = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceSettings")]
        InvoiceSettings = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"productsList")]
        ProductsList = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"productEdit")]
        ProductEdit = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"searchResults")]
        SearchResults = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"conversation")]
        Conversation = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"files")]
        Files = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"filesAdd")]
        FilesAdd = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"filesEdit")]
        FilesEdit = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"salesInvoiceUpload")]
        SalesInvoiceUpload = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"companyList")]
        CompanyList = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"tunnelPage")]
        TunnelPage = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"packages")]
        Packages = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"contactsEdit")]
        ContactsEdit = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"apiManagement")]
        ApiManagement = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"salesAttachmentUpload")]
        SalesAttachmentUpload = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"invoiceMessages")]
        InvoiceMessages = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"addCompany")]
        AddCompany = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"contractApplications")]
        ContractApplications = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"contractApplicationsUpdate")]
        ContractApplicationsUpdate = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"salesInvoiceCopy")]
        SalesInvoiceCopy = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"companyNameFromRegister")]
        CompanyNameFromRegister = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"salesInvoiceCirEdit")]
        SalesInvoiceCirEdit = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"purchaseInvoiceCirEdit")]
        PurchaseInvoiceCirEdit = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"changePackage")]
        ChangePackage = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"oneClickOrder")]
        OneClickOrder = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"companyLogo")]
        CompanyLogo = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"cirTickets")]
        CirTickets = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"cirTicketDetails")]
        CirTicketDetails = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"cirTicketNew")]
        CirTicketNew = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"groupVat")]
        GroupVat = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"groupVatEdit")]
        GroupVatEdit = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"singleVat")]
        SingleVat = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"singleVatEdit")]
        SingleVatEdit = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"ispSettings")]
        IspSettings = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"publicPurchaseContractorInvoices")]
        PublicPurchaseContractorInvoices = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"ispConfiguration")]
        IspConfiguration = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"publicPurchaseContractorInvoiceView")]
        PublicPurchaseContractorInvoiceView = 55,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanySettingsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("homeRoute")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? HomeRoute { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modules")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   

        // TODO(system.text.json): Add string enum item converter
        public System.Collections.Generic.ICollection<SspModules>? Modules { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CompanySettingsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CompanySettingsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CompanyStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Passive")]
        Passive = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Migrated")]
        Migrated = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SerbiaCompanyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Company")]
        Company = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SoleProprietor")]
        SoleProprietor = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Association")]
        Association = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BancropcyEstate")]
        BancropcyEstate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Foundation")]
        Foundation = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SportsAssociation")]
        SportsAssociation = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Chamber")]
        Chamber = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BudgetUser")]
        BudgetUser = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanyDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("companyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CompanyId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("countryId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int CountryId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? WebAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SspAddressDto>? Addresses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SspBankAccountDto>? BankAccounts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("emails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SspEmailDto>? Emails { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RegistrationCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRegistrationCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(15)]
        public string? VatRegistrationCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PhoneNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("logo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Logo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("settings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CompanySettingsDto Settings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isMainCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMainCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groupId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<int>? GroupId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPrivateCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrivateCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("packageId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PackageId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plusChannelsActive")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PlusChannelsActive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CompanyStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyWillBeDeletedAt")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CompanyWillBeDeletedAt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serbiaCompanyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SerbiaCompanyType SerbiaCompanyType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonSebIbanWarning")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool NonSebIbanWarning { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storeInvoiceDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? StoreInvoiceDetails { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasISP")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? HasISP { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("informationServiceProviderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? InformationServiceProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("informationServiceProviderName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InformationServiceProviderName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ispAcceptedToRepresentCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IspAcceptedToRepresentCompany { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CompanyDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CompanyDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LineItemDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("rowId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long RowId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int OrderNo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string? Unit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double UnitPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double Quantity { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountPercentage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double DiscountPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 100D)]
        public double VatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatSum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatCategoryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatCategoryCode { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static LineItemDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<LineItemDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesInvoiceAttachmentDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileData")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public byte[]? FileData { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long FileSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime CreatedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isUbl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsUbl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isLink")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsLink { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("link")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Link { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesInvoiceAttachmentDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesInvoiceAttachmentDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesInvoiceBankAccountDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int BankAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long SalesInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unifiedBankAccount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UnifiedBankAccount { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesInvoiceBankAccountDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesInvoiceBankAccountDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesIndividualPrepaymentFeeReductionForExemptionReasonDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("vatCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("feeReduction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double FeeReduction { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesIndividualPrepaymentFeeReductionForExemptionReasonDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesIndividualPrepaymentFeeReductionForExemptionReasonDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesIndividualPrepaymentCalculationVatPerRateParametersDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentCalculationVatPerRateParametersId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long PrepaymentCalculationVatPerRateParametersId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentVatBaseReduction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PrepaymentVatBaseReduction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaidVatPerRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PrepaidVatPerRate { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesIndividualPrepaymentCalculationVatPerRateParametersDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesIndividualPrepaymentCalculationVatPerRateParametersDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesIndividualPrepaymentCalculationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalPrepaymentWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalPrepaymentWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentPaidVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PrepaymentPaidVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrepaymentInvoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalPrepaymentInvoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("individualPrepaymentFeeReductionForExemptionReasons")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SalesIndividualPrepaymentFeeReductionForExemptionReasonDto>? IndividualPrepaymentFeeReductionForExemptionReasons { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("individualPrepaymentPrepaymentVatPerRateParameters")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SalesIndividualPrepaymentCalculationVatPerRateParametersDto>? IndividualPrepaymentPrepaymentVatPerRateParameters { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesIndividualPrepaymentCalculationDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesIndividualPrepaymentCalculationDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SelectedIndividualPrepaymentInvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("selectedPrepaymentInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long SelectedPrepaymentInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long PrepaymentInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentInvoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PrepaymentInvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepayedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PrepayedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepayedVAT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PrepayedVAT { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? PaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contractId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ContractId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceSentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? InvoiceSentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentCalculation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SalesIndividualPrepaymentCalculationDto PrepaymentCalculation { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SelectedIndividualPrepaymentInvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SelectedIndividualPrepaymentInvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ErrorCodes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invalid")]
        Invalid = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceIdNotUnique")]
        ServiceIdNotUnique = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceNumberTooLong")]
        InvoiceNumberTooLong = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceCurrencyInvalid")]
        InvoiceCurrencyInvalid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceNumberNotUnique")]
        InvoiceNumberNotUnique = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"IbanInvalid")]
        IbanInvalid = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"PasswordMissing")]
        PasswordMissing = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"CurrencyIdInvalid")]
        CurrencyIdInvalid = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"BankIdInvalid")]
        BankIdInvalid = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyCountryIdInvalid")]
        CompanyCountryIdInvalid = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"AadressCountryIdInvalid")]
        AadressCountryIdInvalid = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RequiredCompanyAddressMissing")]
        RequiredCompanyAddressMissing = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"UserCountryIdInvalid")]
        UserCountryIdInvalid = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNotRegistered")]
        UserNotRegistered = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNotActivated")]
        UserNotActivated = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNotFound")]
        UserNotFound = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"SmartIdLoginCanceled")]
        SmartIdLoginCanceled = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"SmartIdTimeout")]
        SmartIdTimeout = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"SmartIdUserNotRegistered")]
        SmartIdUserNotRegistered = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdNotRegistered")]
        MobileIdNotRegistered = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdCertificateError")]
        MobileIdCertificateError = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdCanceled")]
        MobileIdCanceled = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdTimeout")]
        MobileIdTimeout = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdSimNotReady")]
        MobileIdSimNotReady = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdPhoneIsOff")]
        MobileIdPhoneIsOff = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdSendingError")]
        MobileIdSendingError = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdSimError")]
        MobileIdSimError = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"LoginFailed")]
        LoginFailed = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdError")]
        MobileIdError = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"SmartIdFailed")]
        SmartIdFailed = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"DublicateUserPersonalId")]
        DublicateUserPersonalId = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"DublicateUsername")]
        DublicateUsername = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"UsernameTooShort")]
        UsernameTooShort = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"ExtensionInvalid")]
        ExtensionInvalid = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"CodeInvalid")]
        CodeInvalid = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"CodeDuplicate")]
        CodeDuplicate = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"DifferentPersonalId")]
        DifferentPersonalId = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"UserConfirmed")]
        UserConfirmed = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"ContractEmailMissing")]
        ContractEmailMissing = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"ContractAddressDoesNotMatchCompanyAddress")]
        ContractAddressDoesNotMatchCompanyAddress = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"ContractAddressNotDefined")]
        ContractAddressNotDefined = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyAddressNotDefined")]
        CompanyAddressNotDefined = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyEmailMissing")]
        CompanyEmailMissing = 42,

        [System.Runtime.Serialization.EnumMember(Value = @"XmlInvalid")]
        XmlInvalid = 43,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceMissing")]
        EInvoiceMissing = 44,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceGlobalIdMissing")]
        EInvoiceGlobalIdMissing = 45,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceGlobalIdDublicate")]
        EInvoiceGlobalIdDublicate = 46,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceNumberMissing")]
        EInvoiceNumberMissing = 47,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceNumberDublicate")]
        EInvoiceNumberDublicate = 48,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceBuyerPartyMissing")]
        EInvoiceBuyerPartyMissing = 49,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceBuyerNameMissing")]
        EInvoiceBuyerNameMissing = 50,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceBuyerRegNumberMissing")]
        EInvoiceBuyerRegNumberMissing = 51,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceSellerPartyMissing")]
        EInvoiceSellerPartyMissing = 52,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceSellerNameMissing")]
        EInvoiceSellerNameMissing = 53,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceSellerRegNumberMissing")]
        EInvoiceSellerRegNumberMissing = 54,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemMissing")]
        EInvoiceInvoiceItemMissing = 55,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemGroupMissing")]
        EInvoiceInvoiceItemGroupMissing = 56,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemDescriptionMissing")]
        EInvoiceInvoiceItemDescriptionMissing = 57,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemDetailInfoMissing")]
        EInvoiceInvoiceItemDetailInfoMissing = 58,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceSumGroupMissing")]
        EInvoiceInvoiceSumGroupMissing = 59,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceCurrencyMissing")]
        EInvoiceInvoiceCurrencyMissing = 60,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemDetailInfoItemUnitMissing")]
        EInvoiceInvoiceItemDetailInfoItemUnitMissing = 61,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemsCountTooBig")]
        EInvoiceInvoiceItemsCountTooBig = 62,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemsPriceTooBig")]
        EInvoiceInvoiceItemsPriceTooBig = 63,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemsPriceTooSmall")]
        EInvoiceInvoiceItemsPriceTooSmall = 64,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemsPriceNegative")]
        EInvoiceInvoiceItemsPriceNegative = 65,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceInvoiceItemsAmountTooBig")]
        EInvoiceInvoiceItemsAmountTooBig = 66,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceChannelIdMissing")]
        EInvoiceChannelIdMissing = 67,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceChannelAddressMissing")]
        EInvoiceChannelAddressMissing = 68,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceChannelAddressInvalid")]
        EInvoiceChannelAddressInvalid = 69,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceChannelAddressWithSpace")]
        EInvoiceChannelAddressWithSpace = 70,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceContractCurrencyConflict")]
        EInvoiceContractCurrencyConflict = 71,

        [System.Runtime.Serialization.EnumMember(Value = @"LogoTypeIsInvalid")]
        LogoTypeIsInvalid = 72,

        [System.Runtime.Serialization.EnumMember(Value = @"LogoSizeIsInvalid")]
        LogoSizeIsInvalid = 73,

        [System.Runtime.Serialization.EnumMember(Value = @"LogoDimensionsAreInvalid")]
        LogoDimensionsAreInvalid = 74,

        [System.Runtime.Serialization.EnumMember(Value = @"FileNameOrExtensionIsInvalid")]
        FileNameOrExtensionIsInvalid = 75,

        [System.Runtime.Serialization.EnumMember(Value = @"UserRegistered")]
        UserRegistered = 76,

        [System.Runtime.Serialization.EnumMember(Value = @"TokenExpired")]
        TokenExpired = 77,

        [System.Runtime.Serialization.EnumMember(Value = @"TokenInvalidOrExpired")]
        TokenInvalidOrExpired = 78,

        [System.Runtime.Serialization.EnumMember(Value = @"DublicateEmail")]
        DublicateEmail = 79,

        [System.Runtime.Serialization.EnumMember(Value = @"SerializationError")]
        SerializationError = 80,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidCategory")]
        InvalidCategory = 81,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidGroup")]
        InvalidGroup = 82,

        [System.Runtime.Serialization.EnumMember(Value = @"PasswordResetTokenAlreadyUsed")]
        PasswordResetTokenAlreadyUsed = 83,

        [System.Runtime.Serialization.EnumMember(Value = @"PasswordResetTokenIncorrect")]
        PasswordResetTokenIncorrect = 84,

        [System.Runtime.Serialization.EnumMember(Value = @"PasswordAtLeastOneDigitRequired")]
        PasswordAtLeastOneDigitRequired = 85,

        [System.Runtime.Serialization.EnumMember(Value = @"PasswordShouldBeEightCharsLong")]
        PasswordShouldBeEightCharsLong = 86,

        [System.Runtime.Serialization.EnumMember(Value = @"PasswordShouldBeWithUpperCase")]
        PasswordShouldBeWithUpperCase = 87,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyIdMissing")]
        CompanyIdMissing = 88,

        [System.Runtime.Serialization.EnumMember(Value = @"IdCardInvalid")]
        IdCardInvalid = 89,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyRegcodeInvalid")]
        CompanyRegcodeInvalid = 90,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyStatusInvalid")]
        CompanyStatusInvalid = 91,

        [System.Runtime.Serialization.EnumMember(Value = @"NoPasswordSetForThisAccount")]
        NoPasswordSetForThisAccount = 92,

        [System.Runtime.Serialization.EnumMember(Value = @"NoTokenProvided")]
        NoTokenProvided = 93,

        [System.Runtime.Serialization.EnumMember(Value = @"SmartIdRunning")]
        SmartIdRunning = 94,

        [System.Runtime.Serialization.EnumMember(Value = @"MobileIdRunning")]
        MobileIdRunning = 95,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceRowsMissing")]
        InvoiceRowsMissing = 96,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceRowDescriptionMissing")]
        InvoiceRowDescriptionMissing = 97,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceRowUnitMissing")]
        InvoiceRowUnitMissing = 98,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceRowVatRateNotAllowedForVatCategory")]
        InvoiceRowVatRateNotAllowedForVatCategory = 99,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceRowForDiscountPerVatCategoryNotDefined")]
        InvoiceRowForDiscountPerVatCategoryNotDefined = 100,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceRowForPrepaymentValuePerVatCategoryNotDefined")]
        InvoiceRowForPrepaymentValuePerVatCategoryNotDefined = 101,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceRowDiscountAmountMustBeInAccordanceWithDiscountPercentage")]
        InvoiceRowDiscountAmountMustBeInAccordanceWithDiscountPercentage = 102,

        [System.Runtime.Serialization.EnumMember(Value = @"ReferenceNumberInvalid")]
        ReferenceNumberInvalid = 103,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceAlreadySent")]
        InvoiceAlreadySent = 104,

        [System.Runtime.Serialization.EnumMember(Value = @"MissingIban")]
        MissingIban = 105,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotRejectInvoiceWithoutComment")]
        CannotRejectInvoiceWithoutComment = 106,

        [System.Runtime.Serialization.EnumMember(Value = @"CirMaximumSizeOfCommentCrossed")]
        CirMaximumSizeOfCommentCrossed = 107,

        [System.Runtime.Serialization.EnumMember(Value = @"CirSpecialCharactersNotAllowed")]
        CirSpecialCharactersNotAllowed = 108,

        [System.Runtime.Serialization.EnumMember(Value = @"BankAccountIncorrect")]
        BankAccountIncorrect = 109,

        [System.Runtime.Serialization.EnumMember(Value = @"FileTooBig")]
        FileTooBig = 110,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidCompanyId")]
        InvalidCompanyId = 111,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceSellerNameNotTheSame")]
        EInvoiceSellerNameNotTheSame = 112,

        [System.Runtime.Serialization.EnumMember(Value = @"EInvoiceSellerRegNumberNotTheSame")]
        EInvoiceSellerRegNumberNotTheSame = 113,

        [System.Runtime.Serialization.EnumMember(Value = @"EmailMissing")]
        EmailMissing = 114,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyNameInvalid")]
        CompanyNameInvalid = 115,

        [System.Runtime.Serialization.EnumMember(Value = @"ChannelInvalid")]
        ChannelInvalid = 116,

        [System.Runtime.Serialization.EnumMember(Value = @"BudgetCompanyDataInvalid")]
        BudgetCompanyDataInvalid = 117,

        [System.Runtime.Serialization.EnumMember(Value = @"CurrencyInvalid")]
        CurrencyInvalid = 118,

        [System.Runtime.Serialization.EnumMember(Value = @"ProformaCannotBeCreditInvoice")]
        ProformaCannotBeCreditInvoice = 119,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceNumberInvalid")]
        InvoiceNumberInvalid = 120,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageIdInvalid")]
        PackageIdInvalid = 121,

        [System.Runtime.Serialization.EnumMember(Value = @"PayablePackageMissingFields")]
        PayablePackageMissingFields = 122,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyInfoMissing")]
        CompanyInfoMissing = 123,

        [System.Runtime.Serialization.EnumMember(Value = @"PackageDowngradingOnlyByServiceDesk")]
        PackageDowngradingOnlyByServiceDesk = 124,

        [System.Runtime.Serialization.EnumMember(Value = @"OneClickOrderInsufficientRole")]
        OneClickOrderInsufficientRole = 125,

        [System.Runtime.Serialization.EnumMember(Value = @"Be51")]
        Be51 = 126,

        [System.Runtime.Serialization.EnumMember(Value = @"Be62")]
        Be62 = 127,

        [System.Runtime.Serialization.EnumMember(Value = @"Be59")]
        Be59 = 128,

        [System.Runtime.Serialization.EnumMember(Value = @"Be85")]
        Be85 = 129,

        [System.Runtime.Serialization.EnumMember(Value = @"Be64")]
        Be64 = 130,

        [System.Runtime.Serialization.EnumMember(Value = @"Be65")]
        Be65 = 131,

        [System.Runtime.Serialization.EnumMember(Value = @"Be56")]
        Be56 = 132,

        [System.Runtime.Serialization.EnumMember(Value = @"Be61")]
        Be61 = 133,

        [System.Runtime.Serialization.EnumMember(Value = @"Be81")]
        Be81 = 134,

        [System.Runtime.Serialization.EnumMember(Value = @"Be66")]
        Be66 = 135,

        [System.Runtime.Serialization.EnumMember(Value = @"Be63")]
        Be63 = 136,

        [System.Runtime.Serialization.EnumMember(Value = @"Be82")]
        Be82 = 137,

        [System.Runtime.Serialization.EnumMember(Value = @"Be3")]
        Be3 = 138,

        [System.Runtime.Serialization.EnumMember(Value = @"Be10")]
        Be10 = 139,

        [System.Runtime.Serialization.EnumMember(Value = @"Be22")]
        Be22 = 140,

        [System.Runtime.Serialization.EnumMember(Value = @"Be32")]
        Be32 = 141,

        [System.Runtime.Serialization.EnumMember(Value = @"Be33")]
        Be33 = 142,

        [System.Runtime.Serialization.EnumMember(Value = @"Be86")]
        Be86 = 143,

        [System.Runtime.Serialization.EnumMember(Value = @"Be20")]
        Be20 = 144,

        [System.Runtime.Serialization.EnumMember(Value = @"Be21")]
        Be21 = 145,

        [System.Runtime.Serialization.EnumMember(Value = @"Be76")]
        Be76 = 146,

        [System.Runtime.Serialization.EnumMember(Value = @"Be78")]
        Be78 = 147,

        [System.Runtime.Serialization.EnumMember(Value = @"Be87")]
        Be87 = 148,

        [System.Runtime.Serialization.EnumMember(Value = @"Be80")]
        Be80 = 149,

        [System.Runtime.Serialization.EnumMember(Value = @"Be18")]
        Be18 = 150,

        [System.Runtime.Serialization.EnumMember(Value = @"Be14")]
        Be14 = 151,

        [System.Runtime.Serialization.EnumMember(Value = @"Be79")]
        Be79 = 152,

        [System.Runtime.Serialization.EnumMember(Value = @"Be11")]
        Be11 = 153,

        [System.Runtime.Serialization.EnumMember(Value = @"Be35")]
        Be35 = 154,

        [System.Runtime.Serialization.EnumMember(Value = @"Be57")]
        Be57 = 155,

        [System.Runtime.Serialization.EnumMember(Value = @"Be70")]
        Be70 = 156,

        [System.Runtime.Serialization.EnumMember(Value = @"Be6")]
        Be6 = 157,

        [System.Runtime.Serialization.EnumMember(Value = @"Be50")]
        Be50 = 158,

        [System.Runtime.Serialization.EnumMember(Value = @"Be9")]
        Be9 = 159,

        [System.Runtime.Serialization.EnumMember(Value = @"Be7")]
        Be7 = 160,

        [System.Runtime.Serialization.EnumMember(Value = @"Be49")]
        Be49 = 161,

        [System.Runtime.Serialization.EnumMember(Value = @"Be12")]
        Be12 = 162,

        [System.Runtime.Serialization.EnumMember(Value = @"Be48")]
        Be48 = 163,

        [System.Runtime.Serialization.EnumMember(Value = @"Be54")]
        Be54 = 164,

        [System.Runtime.Serialization.EnumMember(Value = @"Be55")]
        Be55 = 165,

        [System.Runtime.Serialization.EnumMember(Value = @"Be88")]
        Be88 = 166,

        [System.Runtime.Serialization.EnumMember(Value = @"Be90")]
        Be90 = 167,

        [System.Runtime.Serialization.EnumMember(Value = @"Bw91")]
        Bw91 = 168,

        [System.Runtime.Serialization.EnumMember(Value = @"Be92")]
        Be92 = 169,

        [System.Runtime.Serialization.EnumMember(Value = @"Be93")]
        Be93 = 170,

        [System.Runtime.Serialization.EnumMember(Value = @"Be94")]
        Be94 = 171,

        [System.Runtime.Serialization.EnumMember(Value = @"Be95")]
        Be95 = 172,

        [System.Runtime.Serialization.EnumMember(Value = @"Be96")]
        Be96 = 173,

        [System.Runtime.Serialization.EnumMember(Value = @"Be97")]
        Be97 = 174,

        [System.Runtime.Serialization.EnumMember(Value = @"Be98")]
        Be98 = 175,

        [System.Runtime.Serialization.EnumMember(Value = @"Be25")]
        Be25 = 176,

        [System.Runtime.Serialization.EnumMember(Value = @"Bw102")]
        Bw102 = 177,

        [System.Runtime.Serialization.EnumMember(Value = @"Bw103")]
        Bw103 = 178,

        [System.Runtime.Serialization.EnumMember(Value = @"Bw104")]
        Bw104 = 179,

        [System.Runtime.Serialization.EnumMember(Value = @"Bw105")]
        Bw105 = 180,

        [System.Runtime.Serialization.EnumMember(Value = @"Be106")]
        Be106 = 181,

        [System.Runtime.Serialization.EnumMember(Value = @"ServiceIdMissing")]
        ServiceIdMissing = 182,

        [System.Runtime.Serialization.EnumMember(Value = @"RegCodeMissing")]
        RegCodeMissing = 183,

        [System.Runtime.Serialization.EnumMember(Value = @"PersonalIdMissing")]
        PersonalIdMissing = 184,

        [System.Runtime.Serialization.EnumMember(Value = @"LursoftError")]
        LursoftError = 185,

        [System.Runtime.Serialization.EnumMember(Value = @"GetCompanyVatNumberNotDefined")]
        GetCompanyVatNumberNotDefined = 186,

        [System.Runtime.Serialization.EnumMember(Value = @"GetCompanyRegistrationCodeNotDefined")]
        GetCompanyRegistrationCodeNotDefined = 187,

        [System.Runtime.Serialization.EnumMember(Value = @"GetCompanyAdditionalCodeNotDefined")]
        GetCompanyAdditionalCodeNotDefined = 188,

        [System.Runtime.Serialization.EnumMember(Value = @"TooManyAttachments")]
        TooManyAttachments = 189,

        [System.Runtime.Serialization.EnumMember(Value = @"StornoCommentNotDefined")]
        StornoCommentNotDefined = 190,

        [System.Runtime.Serialization.EnumMember(Value = @"CancelCommentNotDefined")]
        CancelCommentNotDefined = 191,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceDeliveryDateMissing")]
        InvoiceDeliveryDateMissing = 192,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceDueDateMissing")]
        InvoiceDueDateMissing = 193,

        [System.Runtime.Serialization.EnumMember(Value = @"SearchDateBiggerThanYesterday")]
        SearchDateBiggerThanYesterday = 194,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceDateLaterThanToday")]
        InvoiceDateLaterThanToday = 195,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDateMoreThan90DaysInFuture")]
        PaymentDateMoreThan90DaysInFuture = 196,

        [System.Runtime.Serialization.EnumMember(Value = @"IssueDateCannotBeDifferentFromTodays")]
        IssueDateCannotBeDifferentFromTodays = 197,

        [System.Runtime.Serialization.EnumMember(Value = @"CreateCirTicketFailed")]
        CreateCirTicketFailed = 198,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotSendPrepaymentInvoiceToCir")]
        CannotSendPrepaymentInvoiceToCir = 199,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotSendDebitNoteToCir")]
        CannotSendDebitNoteToCir = 200,

        [System.Runtime.Serialization.EnumMember(Value = @"SendingPrepaymentInvoiceToCir")]
        SendingPrepaymentInvoiceToCir = 201,

        [System.Runtime.Serialization.EnumMember(Value = @"SelectedPrepaymenInvoiceNotApproved")]
        SelectedPrepaymenInvoiceNotApproved = 202,

        [System.Runtime.Serialization.EnumMember(Value = @"ThereAreMoreThanOnePrepaymentInvoiceWithSameInvoiceNumbeInStatusApproved")]
        ThereAreMoreThanOnePrepaymentInvoiceWithSameInvoiceNumbeInStatusApproved = 203,

        [System.Runtime.Serialization.EnumMember(Value = @"SendingCreditInvoiceToCir")]
        SendingCreditInvoiceToCir = 204,

        [System.Runtime.Serialization.EnumMember(Value = @"SendingDebitNoteToCir")]
        SendingDebitNoteToCir = 205,

        [System.Runtime.Serialization.EnumMember(Value = @"ContractNumberBetweenSenderAndReceiverIsMandatoryForBudgetUsers")]
        ContractNumberBetweenSenderAndReceiverIsMandatoryForBudgetUsers = 206,

        [System.Runtime.Serialization.EnumMember(Value = @"ContractNumberBetweenSenderAndReceiverIsMandatoryForCirInvoice")]
        ContractNumberBetweenSenderAndReceiverIsMandatoryForCirInvoice = 207,

        [System.Runtime.Serialization.EnumMember(Value = @"EfakturaInvoiceForCIRInvoiceIdNotFound")]
        EfakturaInvoiceForCIRInvoiceIdNotFound = 208,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotSendCreditInvoiceToCir")]
        CannotSendCreditInvoiceToCir = 209,

        [System.Runtime.Serialization.EnumMember(Value = @"NegativeTotalSumCirInvoice")]
        NegativeTotalSumCirInvoice = 210,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidCaptcha")]
        InvalidCaptcha = 211,

        [System.Runtime.Serialization.EnumMember(Value = @"AprDataIncomplete")]
        AprDataIncomplete = 212,

        [System.Runtime.Serialization.EnumMember(Value = @"AprCompanyNotFound")]
        AprCompanyNotFound = 213,

        [System.Runtime.Serialization.EnumMember(Value = @"AprMultipleCompaniesFound")]
        AprMultipleCompaniesFound = 214,

        [System.Runtime.Serialization.EnumMember(Value = @"SsoTokenValidationFaild")]
        SsoTokenValidationFaild = 215,

        [System.Runtime.Serialization.EnumMember(Value = @"UserHasNoActiveCompanies")]
        UserHasNoActiveCompanies = 216,

        [System.Runtime.Serialization.EnumMember(Value = @"RequiresAALLevel2")]
        RequiresAALLevel2 = 217,

        [System.Runtime.Serialization.EnumMember(Value = @"RequiresAALLevel3")]
        RequiresAALLevel3 = 218,

        [System.Runtime.Serialization.EnumMember(Value = @"RequiresIALLevel1")]
        RequiresIALLevel1 = 219,

        [System.Runtime.Serialization.EnumMember(Value = @"RequiresIALLevel2")]
        RequiresIALLevel2 = 220,

        [System.Runtime.Serialization.EnumMember(Value = @"RequiresIALLevel3")]
        RequiresIALLevel3 = 221,

        [System.Runtime.Serialization.EnumMember(Value = @"EpaySignUpInsufficientData")]
        EpaySignUpInsufficientData = 222,

        [System.Runtime.Serialization.EnumMember(Value = @"UserNotLegalRepresentative")]
        UserNotLegalRepresentative = 223,

        [System.Runtime.Serialization.EnumMember(Value = @"SignUpFailed")]
        SignUpFailed = 224,

        [System.Runtime.Serialization.EnumMember(Value = @"AprCallFailed")]
        AprCallFailed = 225,

        [System.Runtime.Serialization.EnumMember(Value = @"UserInvitationInvalid")]
        UserInvitationInvalid = 226,

        [System.Runtime.Serialization.EnumMember(Value = @"KjsRegisterMultipleBudgetCompaniesFound")]
        KjsRegisterMultipleBudgetCompaniesFound = 227,

        [System.Runtime.Serialization.EnumMember(Value = @"KjsRegisterCompanyNotFound")]
        KjsRegisterCompanyNotFound = 228,

        [System.Runtime.Serialization.EnumMember(Value = @"BankIsNotSupported")]
        BankIsNotSupported = 229,

        [System.Runtime.Serialization.EnumMember(Value = @"ErrorCallingTaxAuthority")]
        ErrorCallingTaxAuthority = 230,

        [System.Runtime.Serialization.EnumMember(Value = @"ErrorCallingTaxAuthorityCompanyDataEmpty")]
        ErrorCallingTaxAuthorityCompanyDataEmpty = 231,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyOneClickOrderDisabled")]
        CompanyOneClickOrderDisabled = 232,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxAuthorityCompanyDataNotFound")]
        TaxAuthorityCompanyDataNotFound = 233,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotBeCreditAndDebitInvoiceAtTheSameTime")]
        CannotBeCreditAndDebitInvoiceAtTheSameTime = 234,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditInvoiceMustHaveSource")]
        CreditInvoiceMustHaveSource = 235,

        [System.Runtime.Serialization.EnumMember(Value = @"DebitInvoiceMustHaveSource")]
        DebitInvoiceMustHaveSource = 236,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceInvoiceNotFound")]
        SourceInvoiceNotFound = 237,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceInvoiceSelectionModeNotDefined")]
        SourceInvoiceSelectionModeNotDefined = 238,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceInvoicesNotDefined")]
        SourceInvoicesNotDefined = 239,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceInvoicePeriodNotDefinedCorrectly")]
        SourceInvoicePeriodNotDefinedCorrectly = 240,

        [System.Runtime.Serialization.EnumMember(Value = @"MoreThanOneSourceInvoiceDefined")]
        MoreThanOneSourceInvoiceDefined = 241,

        [System.Runtime.Serialization.EnumMember(Value = @"UnknownSourceInvoiceSelectionMode")]
        UnknownSourceInvoiceSelectionMode = 242,

        [System.Runtime.Serialization.EnumMember(Value = @"RequiredSourceInvoiceNumbersNotChosen")]
        RequiredSourceInvoiceNumbersNotChosen = 243,

        [System.Runtime.Serialization.EnumMember(Value = @"ValueOfExchangeRateCannotBeEmptyOrZero")]
        ValueOfExchangeRateCannotBeEmptyOrZero = 244,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotSendToCirDocumentWithForeignCurrency")]
        CannotSendToCirDocumentWithForeignCurrency = 245,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiverIdNotDefinedOnChangeSalesInvoiceStatusByProcessAction")]
        ReceiverIdNotDefinedOnChangeSalesInvoiceStatusByProcessAction = 246,

        [System.Runtime.Serialization.EnumMember(Value = @"CancelInvoiceMessageNotDefinedOnChangeSalesInvoiceStatusByProcessAction")]
        CancelInvoiceMessageNotDefinedOnChangeSalesInvoiceStatusByProcessAction = 247,

        [System.Runtime.Serialization.EnumMember(Value = @"StornoInvoiceMessageNotDefinedOnChangeSalesInvoiceStatusByProcessAction")]
        StornoInvoiceMessageNotDefinedOnChangeSalesInvoiceStatusByProcessAction = 248,

        [System.Runtime.Serialization.EnumMember(Value = @"SenderCompanyEndpointIdentifierMissing")]
        SenderCompanyEndpointIdentifierMissing = 249,

        [System.Runtime.Serialization.EnumMember(Value = @"SenderEndpointSchemeIDInvalid")]
        SenderEndpointSchemeIDInvalid = 250,

        [System.Runtime.Serialization.EnumMember(Value = @"SenderEndpointValueEmpty")]
        SenderEndpointValueEmpty = 251,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyNumberLengthInvalid")]
        CompanyNumberLengthInvalid = 252,

        [System.Runtime.Serialization.EnumMember(Value = @"SenderJBKJSLengthInvalid")]
        SenderJBKJSLengthInvalid = 253,

        [System.Runtime.Serialization.EnumMember(Value = @"SenderMissedAddingJBKJSPrefix")]
        SenderMissedAddingJBKJSPrefix = 254,

        [System.Runtime.Serialization.EnumMember(Value = @"SenderCompanyNotFound")]
        SenderCompanyNotFound = 255,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyNotFound")]
        CompanyNotFound = 256,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidSenderCompany")]
        InvalidSenderCompany = 257,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidSenderEmail")]
        InvalidSenderEmail = 258,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidSenderContactEmail")]
        InvalidSenderContactEmail = 259,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidSendToCirMode")]
        InvalidSendToCirMode = 260,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiverCompanyEndpointIdentifierMissing")]
        ReceiverCompanyEndpointIdentifierMissing = 261,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiverEndpointSchemeIDInvalid")]
        ReceiverEndpointSchemeIDInvalid = 262,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiverEndpointValueEmpty")]
        ReceiverEndpointValueEmpty = 263,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiverCompanyNotFound")]
        ReceiverCompanyNotFound = 264,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiverJBKJSLengthInvalid")]
        ReceiverJBKJSLengthInvalid = 265,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiverMissedAddingJBKJSPrefix")]
        ReceiverMissedAddingJBKJSPrefix = 266,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceReceiverMissing")]
        InvoiceReceiverMissing = 267,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceReceiverChannelMissing")]
        InvoiceReceiverChannelMissing = 268,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceReceiverChannelInvalid")]
        InvoiceReceiverChannelInvalid = 269,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidReceiverEmail")]
        InvalidReceiverEmail = 270,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceNotApprovedByReceiver")]
        InvoiceNotApprovedByReceiver = 271,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceNotApprovedOrRejectedByReceiver")]
        InvoiceNotApprovedOrRejectedByReceiver = 272,

        [System.Runtime.Serialization.EnumMember(Value = @"FiscalBillInvoiceIdNotUnique")]
        FiscalBillInvoiceIdNotUnique = 273,

        [System.Runtime.Serialization.EnumMember(Value = @"FiscalBillInvoiceIdMustBeSame")]
        FiscalBillInvoiceIdMustBeSame = 274,

        [System.Runtime.Serialization.EnumMember(Value = @"FiscalBillMustHaveDefinedPayments")]
        FiscalBillMustHaveDefinedPayments = 275,

        [System.Runtime.Serialization.EnumMember(Value = @"FiscalBillMustHaveDefinedInvoiceItems")]
        FiscalBillMustHaveDefinedInvoiceItems = 276,

        [System.Runtime.Serialization.EnumMember(Value = @"FiscalBillMustHaveDefinedInvoiceTaxRateItems")]
        FiscalBillMustHaveDefinedInvoiceTaxRateItems = 277,

        [System.Runtime.Serialization.EnumMember(Value = @"ReferentDocumentSdcTimestampIsRequired")]
        ReferentDocumentSdcTimestampIsRequired = 278,

        [System.Runtime.Serialization.EnumMember(Value = @"ReferentDocumentNumberIsRequired")]
        ReferentDocumentNumberIsRequired = 279,

        [System.Runtime.Serialization.EnumMember(Value = @"TaxRateGroupIdIsRequired")]
        TaxRateGroupIdIsRequired = 280,

        [System.Runtime.Serialization.EnumMember(Value = @"SdcTimestampIsRequired")]
        SdcTimestampIsRequired = 281,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLUnsupportedDocumentType")]
        UBLUnsupportedDocumentType = 282,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLSourceInvoiceNotFound")]
        UBLSourceInvoiceNotFound = 283,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLSourceInvoiceNumberNotExist")]
        UBLSourceInvoiceNumberNotExist = 284,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLSourceInvoiceNumberNotFound")]
        UBLSourceInvoiceNumberNotFound = 285,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLSourceInvoiceNotApproved")]
        UBLSourceInvoiceNotApproved = 286,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLCannotBeDefinedInvoiceDocumentReferenceIDWithInvoicePeriodStartDateAndInvoicePeriodEndDateParameters")]
        UBLCannotBeDefinedInvoiceDocumentReferenceIDWithInvoicePeriodStartDateAndInvoicePeriodEndDateParameters = 287,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLNotRegularTypeOfSourceInvoice")]
        UBLNotRegularTypeOfSourceInvoice = 288,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPrepaymentInvoiceNotDefined")]
        UBLPrepaymentInvoiceNotDefined = 289,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPrepaymentInvoiceNotFound")]
        UBLPrepaymentInvoiceNotFound = 290,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPrepaymenInvoiceNotApproved")]
        UBLPrepaymenInvoiceNotApproved = 291,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLNotRegularTypeOfSelectedPrepaymentInvoice")]
        UBLNotRegularTypeOfSelectedPrepaymentInvoice = 292,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLMandatoryInvoiceDocumentReference")]
        UBLMandatoryInvoiceDocumentReference = 293,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLUndefinedPayableAmount")]
        UBLUndefinedPayableAmount = 294,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLNotAllowedTaxAmountForRecipientCalculatesVAT")]
        UBLNotAllowedTaxAmountForRecipientCalculatesVAT = 295,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLNotAllowedSubtotalTaxAmountForRecipientCalculatesVAT")]
        UBLNotAllowedSubtotalTaxAmountForRecipientCalculatesVAT = 296,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLNotAllowedPercentOfTaxableAmountForRecipientCalculatesVAT")]
        UBLNotAllowedPercentOfTaxableAmountForRecipientCalculatesVAT = 297,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLNotAllowedTaxAmountForExemptionFromVAT")]
        UBLNotAllowedTaxAmountForExemptionFromVAT = 298,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLNotAllowedSubtotalTaxAmountForExemptionFromVAT")]
        UBLNotAllowedSubtotalTaxAmountForExemptionFromVAT = 299,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLNotAllowedPercentOfTaxableAmountForExemptionFromVAT")]
        UBLNotAllowedPercentOfTaxableAmountForExemptionFromVAT = 300,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxTotalNotDefined")]
        UBLTaxTotalNotDefined = 301,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxAmountNotDefined")]
        UBLTaxAmountNotDefined = 302,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxCategoryNotDefined")]
        UBLTaxCategoryNotDefined = 303,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxCategoryIdNotDefined")]
        UBLTaxCategoryIdNotDefined = 304,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLClassifiedTaxCategoryNotDefined")]
        UBLClassifiedTaxCategoryNotDefined = 305,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPercentOfTaxableAmountNotDefined")]
        UBLPercentOfTaxableAmountNotDefined = 306,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxSubtotalNotDefined")]
        UBLTaxSubtotalNotDefined = 307,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxSubtotalAmountlNotDefined")]
        UBLTaxSubtotalAmountlNotDefined = 308,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTotalTaxAmountAndSubtotalTaxAmountDiffer")]
        UBLTotalTaxAmountAndSubtotalTaxAmountDiffer = 309,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxExemptionReasonNotInAppropriateFormat")]
        UBLTaxExemptionReasonNotInAppropriateFormat = 310,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxExemptionReasonKeyNotDefined")]
        UBLTaxExemptionReasonKeyNotDefined = 311,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxExemptionReasonCategoryNotDefined")]
        UBLTaxExemptionReasonCategoryNotDefined = 312,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxExemptionReasonCategoryNotAllowed")]
        UBLTaxExemptionReasonCategoryNotAllowed = 313,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxExemptionReasonCategoryNotCorrect")]
        UBLTaxExemptionReasonCategoryNotCorrect = 314,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxExemptionReasonLineCategoryNotCorrect")]
        UBLTaxExemptionReasonLineCategoryNotCorrect = 315,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLErrorOccurredDuringReadingTaxTotalDetails")]
        UBLErrorOccurredDuringReadingTaxTotalDetails = 316,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLErrorOccurredDuringReadingInvoiceLineTaxTotalDetails")]
        UBLErrorOccurredDuringReadingInvoiceLineTaxTotalDetails = 317,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxCategoryIdUnknown")]
        UBLTaxCategoryIdUnknown = 318,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLJBKJSNotDefined")]
        UBLJBKJSNotDefined = 319,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPartyIdentificationIdIsNotInCorrectFormat")]
        UBLPartyIdentificationIdIsNotInCorrectFormat = 320,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLJBKJSIdentificationIdMustBeDefinedOnlyOnce")]
        UBLJBKJSIdentificationIdMustBeDefinedOnlyOnce = 321,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLSenderCompanyAndSenderCompanyIdentiferDoNotMatch")]
        UBLSenderCompanyAndSenderCompanyIdentiferDoNotMatch = 322,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLReceiverCompanyIdentifierMissing")]
        UBLReceiverCompanyIdentifierMissing = 323,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLCannotBeDefinedPartyIdentificationIdForNonBudgetCompany")]
        UBLCannotBeDefinedPartyIdentificationIdForNonBudgetCompany = 324,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLFileNotFound")]
        UBLFileNotFound = 325,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLCompanyIsNonBudgetUser")]
        UBLCompanyIsNonBudgetUser = 326,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLCompanyIsBudgetUser")]
        UBLCompanyIsBudgetUser = 327,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLCompanyWithVATRegistrationCodeIsBudgetUser")]
        UBLCompanyWithVATRegistrationCodeIsBudgetUser = 328,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLVATRegistrationCodeDoesNotMatchTheRegistrationCodeOfTheCompanyWithJBKJS")]
        UBLVATRegistrationCodeDoesNotMatchTheRegistrationCodeOfTheCompanyWithJBKJS = 329,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLRegistrationCodeNotInCorrectFormat")]
        UBLRegistrationCodeNotInCorrectFormat = 330,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLAttachmentObjectIsNotDefined")]
        UBLAttachmentObjectIsNotDefined = 331,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPublicContractSignerJBKJSNotInCorrectFormat")]
        UBLPublicContractSignerJBKJSNotInCorrectFormat = 332,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPaymentMeansNotDefined")]
        UBLPaymentMeansNotDefined = 333,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPaymentMeansCodeNotDefined")]
        UBLPaymentMeansCodeNotDefined = 334,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPayeeFinancialAccountIdNotDefined")]
        UBLPayeeFinancialAccountIdNotDefined = 335,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLReferenceAndModelNumberFormatNotValid")]
        UBLReferenceAndModelNumberFormatNotValid = 336,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLDeliveryDateNotAllowedForThisInvoiceType")]
        UBLDeliveryDateNotAllowedForThisInvoiceType = 337,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxAmountMoreDecimalsThanPermitted")]
        UBLTaxAmountMoreDecimalsThanPermitted = 338,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxSubtotalTaxableAmountMoreDecimalsThanPermitted")]
        UBLTaxSubtotalTaxableAmountMoreDecimalsThanPermitted = 339,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxSubtotalTaxAmountMoreDecimalsThanPermitted")]
        UBLTaxSubtotalTaxAmountMoreDecimalsThanPermitted = 340,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceLineExtensionAmountMoreDecimalsThanPermitted")]
        UBLInvoiceLineExtensionAmountMoreDecimalsThanPermitted = 341,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceLinePriceAmountMoreDecimalsThanPermitted")]
        UBLInvoiceLinePriceAmountMoreDecimalsThanPermitted = 342,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLLineExtensionAmountMoreDecimalsThanPermitted")]
        UBLLineExtensionAmountMoreDecimalsThanPermitted = 343,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxExclusiveAmountMoreDecimalsThanPermitted")]
        UBLTaxExclusiveAmountMoreDecimalsThanPermitted = 344,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxInclusiveAmountMoreDecimalsThanPermitted")]
        UBLTaxInclusiveAmountMoreDecimalsThanPermitted = 345,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLAllowanceTotalAmountMoreDecimalsThanPermitted")]
        UBLAllowanceTotalAmountMoreDecimalsThanPermitted = 346,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPrepayedAmountMoreDecimalsThanPermitted")]
        UBLPrepayedAmountMoreDecimalsThanPermitted = 347,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPayableAmountMoreDecimalsThanPermitted")]
        UBLPayableAmountMoreDecimalsThanPermitted = 348,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPrepaymentInvoiceLineUnitCodeNotValid")]
        UBLPrepaymentInvoiceLineUnitCodeNotValid = 349,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPrepaymentInvoiceLineQuanitityNotValid")]
        UBLPrepaymentInvoiceLineQuanitityNotValid = 350,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceExtensionNotDefined")]
        UBLInvoiceExtensionNotDefined = 351,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceExtensionSrbDtExtNotValid")]
        UBLInvoiceExtensionSrbDtExtNotValid = 352,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceExtensionReducedTotalsTaxTotalNotValid")]
        UBLInvoiceExtensionReducedTotalsTaxTotalNotValid = 353,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceExtensionReducedTotalsTaxSubtotalNotDefined")]
        UBLInvoiceExtensionReducedTotalsTaxSubtotalNotDefined = 354,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLBillingReferenceMissing")]
        UBLBillingReferenceMissing = 355,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLTaxCategoryNotAllowed")]
        UBLTaxCategoryNotAllowed = 356,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLOnlyOneTaxSubtotalAllowedPerCategory")]
        UBLOnlyOneTaxSubtotalAllowedPerCategory = 357,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLMoreThanOneSourceInvoiceDefined")]
        UBLMoreThanOneSourceInvoiceDefined = 358,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLOrderNumberLotNumberOrContractNumberIsRequired")]
        UBLOrderNumberLotNumberOrContractNumberIsRequired = 359,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLVatRegistrationCodesDoesNotMatch")]
        UBLVatRegistrationCodesDoesNotMatch = 360,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLPartyTaxSchemeCompanyIdWithoutPrefix")]
        UBLPartyTaxSchemeCompanyIdWithoutPrefix = 361,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLVatRegistrationCodeDoesNotHaveGoodLength")]
        UBLVatRegistrationCodeDoesNotHaveGoodLength = 362,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLRegistrationCodeDoesNotHaveGoodLength")]
        UBLRegistrationCodeDoesNotHaveGoodLength = 363,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLVatTaxSchemeIdNotValid")]
        UBLVatTaxSchemeIdNotValid = 364,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceNumberInvalid")]
        UBLInvoiceNumberInvalid = 365,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceNumberContainsInvalidCharacters")]
        UBLInvoiceNumberContainsInvalidCharacters = 366,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLDocumentCurrencyNotValid")]
        UBLDocumentCurrencyNotValid = 367,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLForeignCurrencyShouldHaveTwoTaxTotals")]
        UBLForeignCurrencyShouldHaveTwoTaxTotals = 368,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLCannotSendToCirDocumentWithForeignCurrency")]
        UBLCannotSendToCirDocumentWithForeignCurrency = 369,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLMissingDocumentCurrency")]
        UBLMissingDocumentCurrency = 370,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLIncorrectVatRateForStandardVatRate")]
        UBLIncorrectVatRateForStandardVatRate = 371,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLInvoiceExtensionNotContainPrepaymentData")]
        UBLInvoiceExtensionNotContainPrepaymentData = 372,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLMaxNoteLengthExceeded")]
        UBLMaxNoteLengthExceeded = 373,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLDueDateIsMissing")]
        UBLDueDateIsMissing = 374,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLProductNameLengthExceeded")]
        UBLProductNameLengthExceeded = 375,

        [System.Runtime.Serialization.EnumMember(Value = @"UBLUploadRequestIdDuplicate")]
        UBLUploadRequestIdDuplicate = 376,

        [System.Runtime.Serialization.EnumMember(Value = @"VATNumberNotActive")]
        VATNumberNotActive = 377,

        [System.Runtime.Serialization.EnumMember(Value = @"VATRegistrationCodeLengthInvalid")]
        VATRegistrationCodeLengthInvalid = 378,

        [System.Runtime.Serialization.EnumMember(Value = @"VATRegistrationCodeDoesNotMatchTheRegistrationCodeOfTheCompanyWithJBKJS")]
        VATRegistrationCodeDoesNotMatchTheRegistrationCodeOfTheCompanyWithJBKJS = 379,

        [System.Runtime.Serialization.EnumMember(Value = @"VatPointDateTypeNotAllowedForChosenDocumentType")]
        VatPointDateTypeNotAllowedForChosenDocumentType = 380,

        [System.Runtime.Serialization.EnumMember(Value = @"VATCategoryNotAllowed")]
        VATCategoryNotAllowed = 381,

        [System.Runtime.Serialization.EnumMember(Value = @"VatExemptionReasonNotExists")]
        VatExemptionReasonNotExists = 382,

        [System.Runtime.Serialization.EnumMember(Value = @"VatExemptionFreeFormNoteNotDefined")]
        VatExemptionFreeFormNoteNotDefined = 383,

        [System.Runtime.Serialization.EnumMember(Value = @"VatExemptionReasonIdNotDefined")]
        VatExemptionReasonIdNotDefined = 384,

        [System.Runtime.Serialization.EnumMember(Value = @"VatExemptionReasonKeyNotDefined")]
        VatExemptionReasonKeyNotDefined = 385,

        [System.Runtime.Serialization.EnumMember(Value = @"VatExemptionReasonPointOfLawNotActive")]
        VatExemptionReasonPointOfLawNotActive = 386,

        [System.Runtime.Serialization.EnumMember(Value = @"VatExemptionCategoryIsNotInUse")]
        VatExemptionCategoryIsNotInUse = 387,

        [System.Runtime.Serialization.EnumMember(Value = @"VatExemptionReasonNotDefinedForDecisionNumber")]
        VatExemptionReasonNotDefinedForDecisionNumber = 388,

        [System.Runtime.Serialization.EnumMember(Value = @"VATExemptionCategoryNotDeffined")]
        VATExemptionCategoryNotDeffined = 389,

        [System.Runtime.Serialization.EnumMember(Value = @"VATReasonCodeForVATExemptionCategoryNotDeffined")]
        VATReasonCodeForVATExemptionCategoryNotDeffined = 390,

        [System.Runtime.Serialization.EnumMember(Value = @"SelectedPrepaymentInvoiceNotCorrectInvoiceId")]
        SelectedPrepaymentInvoiceNotCorrectInvoiceId = 391,

        [System.Runtime.Serialization.EnumMember(Value = @"SelectedPrepaymentInvoiceNotCorrectInvoiceNumber")]
        SelectedPrepaymentInvoiceNotCorrectInvoiceNumber = 392,

        [System.Runtime.Serialization.EnumMember(Value = @"SelectedPrepaymentInvoiceNotCorrectPrepayedAmount")]
        SelectedPrepaymentInvoiceNotCorrectPrepayedAmount = 393,

        [System.Runtime.Serialization.EnumMember(Value = @"SelectedPrepaymentInvoiceNotCorrectPrepayedVAT")]
        SelectedPrepaymentInvoiceNotCorrectPrepayedVAT = 394,

        [System.Runtime.Serialization.EnumMember(Value = @"SelectedPrepaymentInvoiceNotCorrectCurrency")]
        SelectedPrepaymentInvoiceNotCorrectCurrency = 395,

        [System.Runtime.Serialization.EnumMember(Value = @"SelectedPrepaymentInvoiceNotCorrectPaymentDate")]
        SelectedPrepaymentInvoiceNotCorrectPaymentDate = 396,

        [System.Runtime.Serialization.EnumMember(Value = @"SelectedPrepaymentInvoiceNotCorrectContractId")]
        SelectedPrepaymentInvoiceNotCorrectContractId = 397,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepaymentInvoicesDetailsNotDefined")]
        PrepaymentInvoicesDetailsNotDefined = 398,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepaymentTotalAmountCalculationNotDefined")]
        PrepaymentTotalAmountCalculationNotDefined = 399,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceTypeCodeMissing")]
        InvoiceTypeCodeMissing = 400,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentTypeCodeInvalid")]
        DocumentTypeCodeInvalid = 401,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditNoteTypeCodeNotCorrent")]
        CreditNoteTypeCodeNotCorrent = 402,

        [System.Runtime.Serialization.EnumMember(Value = @"SourceInvoiceCannotBePrepaymentInvoiceType")]
        SourceInvoiceCannotBePrepaymentInvoiceType = 403,

        [System.Runtime.Serialization.EnumMember(Value = @"SalesInvoiceNotFound")]
        SalesInvoiceNotFound = 404,

        [System.Runtime.Serialization.EnumMember(Value = @"PurchaseInvoiceNotFound")]
        PurchaseInvoiceNotFound = 405,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceHasNoAEVatCategory")]
        InvoiceHasNoAEVatCategory = 406,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceStornoCancellationDataNotDefined")]
        InvoiceStornoCancellationDataNotDefined = 407,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceCancellationDataNotDefined")]
        InvoiceCancellationDataNotDefined = 408,

        [System.Runtime.Serialization.EnumMember(Value = @"GetAprDataFromEsbFailed")]
        GetAprDataFromEsbFailed = 409,

        [System.Runtime.Serialization.EnumMember(Value = @"NoneOfInputParametersIsDefined")]
        NoneOfInputParametersIsDefined = 410,

        [System.Runtime.Serialization.EnumMember(Value = @"SomeOfInputParametarsNotDefined")]
        SomeOfInputParametarsNotDefined = 411,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyWithRegistrationNumberIsBudgetUser")]
        CompanyWithRegistrationNumberIsBudgetUser = 412,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyWithVATRegistrationCodeIsBudgetUser")]
        CompanyWithVATRegistrationCodeIsBudgetUser = 413,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotGetCompanyByPassingCompanyNumberAsRegistrationNumber")]
        CannotGetCompanyByPassingCompanyNumberAsRegistrationNumber = 414,

        [System.Runtime.Serialization.EnumMember(Value = @"AssignatorCompanyNotFound")]
        AssignatorCompanyNotFound = 415,

        [System.Runtime.Serialization.EnumMember(Value = @"AssignatorCompanyIsNotBudgetUser")]
        AssignatorCompanyIsNotBudgetUser = 416,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyWithJBKJSNotFound")]
        CompanyWithJBKJSNotFound = 417,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyDoesNotHaveDefinedRegistrationCodeAndAdditionalCode")]
        CompanyDoesNotHaveDefinedRegistrationCodeAndAdditionalCode = 418,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyWithRegistrationCodeNotFound")]
        CompanyWithRegistrationCodeNotFound = 419,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyWithVATRegistrationCodeNotFound")]
        CompanyWithVATRegistrationCodeNotFound = 420,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoicePeriodNotDefined")]
        InvoicePeriodNotDefined = 421,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoicePeriodDescriptionCodeNotDefined")]
        InvoicePeriodDescriptionCodeNotDefined = 422,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoicePeriodDescriptionCodeNotProperlyDefined")]
        InvoicePeriodDescriptionCodeNotProperlyDefined = 423,

        [System.Runtime.Serialization.EnumMember(Value = @"UserAlreadyRegisteredToAnotherAccount")]
        UserAlreadyRegisteredToAnotherAccount = 424,

        [System.Runtime.Serialization.EnumMember(Value = @"AllAttachedInvoicesToThisInvoiceMustBeCancelledFirst")]
        AllAttachedInvoicesToThisInvoiceMustBeCancelledFirst = 425,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceForCancellationNotFound")]
        InvoiceForCancellationNotFound = 426,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceForCancellationNotInSpecificStatus")]
        InvoiceForCancellationNotInSpecificStatus = 427,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceForCancellationNotLongEnoughInSendingStatus")]
        InvoiceForCancellationNotLongEnoughInSendingStatus = 428,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceForApproveRejectNotFound")]
        InvoiceForApproveRejectNotFound = 429,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceStatusChangeNotSynchronized")]
        InvoiceStatusChangeNotSynchronized = 430,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceForFactoringNotFound")]
        InvoiceForFactoringNotFound = 431,

        [System.Runtime.Serialization.EnumMember(Value = @"WrongInvoiceTypeForStorno")]
        WrongInvoiceTypeForStorno = 432,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceCannotBeStornoCancelled")]
        InvoiceCannotBeStornoCancelled = 433,

        [System.Runtime.Serialization.EnumMember(Value = @"SendToCirParameterMustBeDefinedForBudgetUser")]
        SendToCirParameterMustBeDefinedForBudgetUser = 434,

        [System.Runtime.Serialization.EnumMember(Value = @"ReceiverBudgetCompanyNotActive")]
        ReceiverBudgetCompanyNotActive = 435,

        [System.Runtime.Serialization.EnumMember(Value = @"SenderBudgetCompanyNotActive")]
        SenderBudgetCompanyNotActive = 436,

        [System.Runtime.Serialization.EnumMember(Value = @"SenderBudgetCompanyDoesNotExist")]
        SenderBudgetCompanyDoesNotExist = 437,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanySetAsISP")]
        CompanySetAsISP = 438,

        [System.Runtime.Serialization.EnumMember(Value = @"ErrorCheckingIfCompanyIsRepresentedByISP")]
        ErrorCheckingIfCompanyIsRepresentedByISP = 439,

        [System.Runtime.Serialization.EnumMember(Value = @"ISPCannotRepresentCompany")]
        ISPCannotRepresentCompany = 440,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceIdNotDefined")]
        InvoiceIdNotDefined = 441,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidPurchaseStatus")]
        InvalidPurchaseStatus = 442,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidSalesStatus")]
        InvalidSalesStatus = 443,

        [System.Runtime.Serialization.EnumMember(Value = @"ISPNotFound")]
        ISPNotFound = 444,

        [System.Runtime.Serialization.EnumMember(Value = @"ISPMustBeChosen")]
        ISPMustBeChosen = 445,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotDownloadLinkAttachment")]
        CannotDownloadLinkAttachment = 446,

        [System.Runtime.Serialization.EnumMember(Value = @"DifferentSerbiaCompanyType")]
        DifferentSerbiaCompanyType = 447,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyMissingCompanyType")]
        CompanyMissingCompanyType = 448,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidCompanyNumber")]
        InvalidCompanyNumber = 449,

        [System.Runtime.Serialization.EnumMember(Value = @"InvalidVatNumber")]
        InvalidVatNumber = 450,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupVatRecordingNotFound")]
        GroupVatRecordingNotFound = 451,

        [System.Runtime.Serialization.EnumMember(Value = @"ISPIsNotActive")]
        ISPIsNotActive = 452,

        [System.Runtime.Serialization.EnumMember(Value = @"VatRecordingPublished")]
        VatRecordingPublished = 453,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupVatRecordingAlreadySent")]
        GroupVatRecordingAlreadySent = 454,

        [System.Runtime.Serialization.EnumMember(Value = @"PublicContractSignerNotBudgetUser")]
        PublicContractSignerNotBudgetUser = 455,

        [System.Runtime.Serialization.EnumMember(Value = @"PublicContractSignerNotFound")]
        PublicContractSignerNotFound = 456,

        [System.Runtime.Serialization.EnumMember(Value = @"PublicContractSignerNotActive")]
        PublicContractSignerNotActive = 457,

        [System.Runtime.Serialization.EnumMember(Value = @"IndividualVatRecordingNotFound")]
        IndividualVatRecordingNotFound = 458,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupIndividualVatRecordingAlreadySent")]
        GroupIndividualVatRecordingAlreadySent = 459,

        [System.Runtime.Serialization.EnumMember(Value = @"ISPIsSetForCompanyAnyOperationIsForbidden")]
        ISPIsSetForCompanyAnyOperationIsForbidden = 460,

        [System.Runtime.Serialization.EnumMember(Value = @"ClientConfirmedISPWillStoreInvoiceDetails")]
        ClientConfirmedISPWillStoreInvoiceDetails = 461,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentPeriodAndSourceInvoicesCannotBeSetAtSameTime")]
        DocumentPeriodAndSourceInvoicesCannotBeSetAtSameTime = 462,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceItemsAmountTooBig")]
        InvoiceItemsAmountTooBig = 463,

        [System.Runtime.Serialization.EnumMember(Value = @"OrderNumberLotNumberOrContractNumberIsRequired")]
        OrderNumberLotNumberOrContractNumberIsRequired = 464,

        [System.Runtime.Serialization.EnumMember(Value = @"TotalToPayMoreDecimalsThanPermitted")]
        TotalToPayMoreDecimalsThanPermitted = 465,

        [System.Runtime.Serialization.EnumMember(Value = @"SumWithVatMoreDecimalsThanPermitted")]
        SumWithVatMoreDecimalsThanPermitted = 466,

        [System.Runtime.Serialization.EnumMember(Value = @"SumWithoutVatMoreDecimalsThanPermitted")]
        SumWithoutVatMoreDecimalsThanPermitted = 467,

        [System.Runtime.Serialization.EnumMember(Value = @"VatSumMoreDecimalsThanPermitted")]
        VatSumMoreDecimalsThanPermitted = 468,

        [System.Runtime.Serialization.EnumMember(Value = @"UnitPriceMoreDecimalsThanPermitted")]
        UnitPriceMoreDecimalsThanPermitted = 469,

        [System.Runtime.Serialization.EnumMember(Value = @"NetAmountMoreDecimalsThanPermitted")]
        NetAmountMoreDecimalsThanPermitted = 470,

        [System.Runtime.Serialization.EnumMember(Value = @"GrossAmountMoreDecimalsThanPermitted")]
        GrossAmountMoreDecimalsThanPermitted = 471,

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSigningFail")]
        InvoiceSigningFail = 472,

        [System.Runtime.Serialization.EnumMember(Value = @"WrongCompanyTypeShouldUseBudgetUser")]
        WrongCompanyTypeShouldUseBudgetUser = 473,

        [System.Runtime.Serialization.EnumMember(Value = @"TreasuryRegistrationNotBudgetUser")]
        TreasuryRegistrationNotBudgetUser = 474,

        [System.Runtime.Serialization.EnumMember(Value = @"EFiscalizationDataNotComplete")]
        EFiscalizationDataNotComplete = 475,

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentCurrencyNotValid")]
        DocumentCurrencyNotValid = 476,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotUpdateDocumentInSendingMistakeStatus")]
        CannotUpdateDocumentInSendingMistakeStatus = 477,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotDeleteInvoiceInThisStatus")]
        CannotDeleteInvoiceInThisStatus = 478,

        [System.Runtime.Serialization.EnumMember(Value = @"CalculationNumberNotUnique")]
        CalculationNumberNotUnique = 479,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotChangeGroupVatInThisStatus")]
        CannotChangeGroupVatInThisStatus = 480,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotDeleteGroupVatInThisStatus")]
        CannotDeleteGroupVatInThisStatus = 481,

        [System.Runtime.Serialization.EnumMember(Value = @"ActionNotAllowedForThisVersion")]
        ActionNotAllowedForThisVersion = 482,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotChangeIndividualVatInThisStatus")]
        CannotChangeIndividualVatInThisStatus = 483,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotDeleteIndividualVatInThisStatus")]
        CannotDeleteIndividualVatInThisStatus = 484,

        [System.Runtime.Serialization.EnumMember(Value = @"CalculationNumberRequired")]
        CalculationNumberRequired = 485,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotCancelVatRecordingInThisStatus")]
        CannotCancelVatRecordingInThisStatus = 486,

        [System.Runtime.Serialization.EnumMember(Value = @"RelatedDocumentRequired")]
        RelatedDocumentRequired = 487,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAllowedRelatedDocuments")]
        NotAllowedRelatedDocuments = 488,

        [System.Runtime.Serialization.EnumMember(Value = @"UpdateSalesInvoiceStatus")]
        UpdateSalesInvoiceStatus = 489,

        [System.Runtime.Serialization.EnumMember(Value = @"UpdatePurchaseInvoiceStatusFailed")]
        UpdatePurchaseInvoiceStatusFailed = 490,

        [System.Runtime.Serialization.EnumMember(Value = @"VatDeductionRightNotAllowed")]
        VatDeductionRightNotAllowed = 491,

        [System.Runtime.Serialization.EnumMember(Value = @"CalculationNumberNotCorrect")]
        CalculationNumberNotCorrect = 492,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupVatYearRequired")]
        GroupVatYearRequired = 493,

        [System.Runtime.Serialization.EnumMember(Value = @"IndividualCalculationNumberNotUnique")]
        IndividualCalculationNumberNotUnique = 494,

        [System.Runtime.Serialization.EnumMember(Value = @"CannotChooseVatDeductionRight")]
        CannotChooseVatDeductionRight = 495,

        [System.Runtime.Serialization.EnumMember(Value = @"VatDeductionRightRequired")]
        VatDeductionRightRequired = 496,

        [System.Runtime.Serialization.EnumMember(Value = @"InternalInvoiceOptionNotValid")]
        InternalInvoiceOptionNotValid = 497,

        [System.Runtime.Serialization.EnumMember(Value = @"CIRCompanyByJBKJSNotFound")]
        CIRCompanyByJBKJSNotFound = 498,

        [System.Runtime.Serialization.EnumMember(Value = @"CirCompanyNotFound")]
        CirCompanyNotFound = 499,

        [System.Runtime.Serialization.EnumMember(Value = @"CIRMatchBUByCompanyNumber")]
        CIRMatchBUByCompanyNumber = 500,

        [System.Runtime.Serialization.EnumMember(Value = @"CirInvoiceNotFound")]
        CirInvoiceNotFound = 501,

        [System.Runtime.Serialization.EnumMember(Value = @"CirInvoiceIdNotDefined")]
        CirInvoiceIdNotDefined = 502,

        [System.Runtime.Serialization.EnumMember(Value = @"CirInvoiceNotInAssignedStatus")]
        CirInvoiceNotInAssignedStatus = 503,

        [System.Runtime.Serialization.EnumMember(Value = @"CirCompanyRegistrationResponseNotFound")]
        CirCompanyRegistrationResponseNotFound = 504,

        [System.Runtime.Serialization.EnumMember(Value = @"CirUndefinedCompanyStatus")]
        CirUndefinedCompanyStatus = 505,

        [System.Runtime.Serialization.EnumMember(Value = @"CirUnsavedCompanyRegistrationResponse")]
        CirUnsavedCompanyRegistrationResponse = 506,

        [System.Runtime.Serialization.EnumMember(Value = @"CirError")]
        CirError = 507,

        [System.Runtime.Serialization.EnumMember(Value = @"GetCirCompanyError")]
        GetCirCompanyError = 508,

        [System.Runtime.Serialization.EnumMember(Value = @"GetCirCompanyUnexpectedCirId")]
        GetCirCompanyUnexpectedCirId = 509,

        [System.Runtime.Serialization.EnumMember(Value = @"CirUnsucessfulInvoiceRejection")]
        CirUnsucessfulInvoiceRejection = 510,

        [System.Runtime.Serialization.EnumMember(Value = @"CirUnsuccessfulSubmitCompanyRegistration")]
        CirUnsuccessfulSubmitCompanyRegistration = 511,

        [System.Runtime.Serialization.EnumMember(Value = @"CirUnsuccessfulApprovementOfCompanyRegistration")]
        CirUnsuccessfulApprovementOfCompanyRegistration = 512,

        [System.Runtime.Serialization.EnumMember(Value = @"CirUnsuccessfulCancellationOfCompanyRegistration")]
        CirUnsuccessfulCancellationOfCompanyRegistration = 513,

        [System.Runtime.Serialization.EnumMember(Value = @"CirSubmitCompanyRegistrationNullResponse")]
        CirSubmitCompanyRegistrationNullResponse = 514,

        [System.Runtime.Serialization.EnumMember(Value = @"CirApproveCompanyRegistrationNullResponse")]
        CirApproveCompanyRegistrationNullResponse = 515,

        [System.Runtime.Serialization.EnumMember(Value = @"CirCancelCompanyRegistrationNullResponse")]
        CirCancelCompanyRegistrationNullResponse = 516,

        [System.Runtime.Serialization.EnumMember(Value = @"CirUnknownCompanyRegistrationStep")]
        CirUnknownCompanyRegistrationStep = 517,

        [System.Runtime.Serialization.EnumMember(Value = @"CirIdNotFound")]
        CirIdNotFound = 518,

        [System.Runtime.Serialization.EnumMember(Value = @"CirInvoiceIsAlreadyCancelled")]
        CirInvoiceIsAlreadyCancelled = 519,

        [System.Runtime.Serialization.EnumMember(Value = @"CirAlreadySubmitedRegistrationRequestForThisEntity")]
        CirAlreadySubmitedRegistrationRequestForThisEntity = 520,

        [System.Runtime.Serialization.EnumMember(Value = @"CirFailedToRetrieveValidAccountRegistrationRequests")]
        CirFailedToRetrieveValidAccountRegistrationRequests = 521,

        [System.Runtime.Serialization.EnumMember(Value = @"CirErrorAmountDeltaExceedAmountTolerance")]
        CirErrorAmountDeltaExceedAmountTolerance = 522,

        [System.Runtime.Serialization.EnumMember(Value = @"CirAttemptingToAddLiabilityAmoundDeltaForInvalidCreditor")]
        CirAttemptingToAddLiabilityAmoundDeltaForInvalidCreditor = 523,

        [System.Runtime.Serialization.EnumMember(Value = @"CRFAssignationNotAllowedOnSEF")]
        CRFAssignationNotAllowedOnSEF = 524,

        [System.Runtime.Serialization.EnumMember(Value = @"CirUserWithSpecifiedLoginNameHasAlreadyBeenApproved")]
        CirUserWithSpecifiedLoginNameHasAlreadyBeenApproved = 525,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AssignmentDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("assignmentContractNr")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AssignmentContractNr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignmentDebtorName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AssignmentDebtorName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignmentDebtorCompanyNr")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AssignmentDebtorCompanyNr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignmentIdfNr")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AssignmentIdfNr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originalIdfNr")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OriginalIdfNr { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AssignmentDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AssignmentDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AmountChangeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("comments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CancelDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelComments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CancelComments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changedId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ChangedId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AmountChangeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AmountChangeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CancellationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("cancelDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CancelDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelledBy")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CancelledBy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reason")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Reason { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CancellationDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CancellationDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SettlementDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("settlementDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? SettlementDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SettlementDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SettlementDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CirHistoryDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assignment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AssignmentDto Assignment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amountChanges")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<AmountChangeDto>? AmountChanges { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancellation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CancellationDto Cancellation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("settlements")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SettlementDto>? Settlements { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CirHistoryDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CirHistoryDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangeUser
    {

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LastName { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ChangeUser FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ChangeUser>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InvoiceChangeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("propertyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PropertyName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oldValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OldValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NewValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateChanged")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime DateChanged { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ChangeUser User { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceDesk")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ServiceDesk { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ispName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? IspName { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InvoiceChangeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<InvoiceChangeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InvoiceHistoryDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceChanges")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<InvoiceChangeDto>? InvoiceChanges { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InvoiceHistoryDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<InvoiceHistoryDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SourceInvoiceSelectionMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"InvoiceSelection")]
        InvoiceSelection = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PeriodSelection")]
        PeriodSelection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InvoiceLinkDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sentToCir")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SentToCir { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SalesInvoiceStatus Status { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InvoiceLinkDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<InvoiceLinkDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VatCategoryDetailsDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("vatCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatRate { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VatCategoryDetailsDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<VatCategoryDetailsDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesPrepaymentCalculationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalPrepaymentWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalPrepaymentWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentPaidVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PrepaymentPaidVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPrepaymentInvoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalPrepaymentInvoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentFeeReductionForVatCategories")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<VatCategoryDetailsDto>? PrepaymentFeeReductionForVatCategories { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesPrepaymentCalculationDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesPrepaymentCalculationDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesInvoiceTotalPaymentsCalculationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("totalPayments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalPayments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentFeeForVatCategories")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<VatCategoryDetailsDto>? PaymentFeeForVatCategories { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesInvoiceTotalPaymentsCalculationDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesInvoiceTotalPaymentsCalculationDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExemptionReasonByVatCategoryDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("vatCategoryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatCategoryCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reasonCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReasonCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exemptionDecisionNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExemptionDecisionNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("feeItemsValueWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double FeeItemsValueWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountFeeWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountFeeWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("feeWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double FeeWithoutVat { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ExemptionReasonByVatCategoryDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ExemptionReasonByVatCategoryDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DiscountDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatCategoryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatCategoryCode { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static DiscountDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<DiscountDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("receiverId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReceiverId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicPurchaseContractSigner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SspCustomerSupplierDto PublicPurchaseContractSigner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicPurchaseContractSignerContractId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? PublicPurchaseContractSignerContractId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SspContractDto Contract { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SalesInvoiceStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uasSender")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CompanyDto UasSender { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalRowsCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TotalRowsCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Channel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ChannelAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceProvider")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceProvider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rows")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<LineItemDto>? Rows { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceMessage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? InvoiceMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptRejectMessage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? AcceptRejectMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attachments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SalesInvoiceAttachmentDto>? Attachments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SalesInvoiceBankAccountDto>? BankAccounts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("selectedPrepaymentInvoices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SelectedIndividualPrepaymentInvoiceDto>? SelectedPrepaymentInvoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCreditInvoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCreditInvoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("senderReceiverContractNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SenderReceiverContractNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ErrorCodes ErrorCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalToPay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TotalToPay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendInvoiceToCir")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SendInvoiceToCir { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirAmountChangeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirAmountChangeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirSettledAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double CirSettledAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isProFormaInvoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsProFormaInvoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirHistory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CirHistoryDto CirHistory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirAssignationHistory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public InvoiceHistoryDto CirAssignationHistory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirInvoiceStatus CirStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDebitNote")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDebitNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stornoNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StornoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelInvoiceMessage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CancelInvoiceMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentInvoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PrepaymentInvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPrepaymentInvoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrepaymentInvoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPointDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int VatPointDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("globUniqId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? GlobUniqId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatNumberFactoringCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatNumberFactoringCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FactoringContractNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceInvoiceSelectionMode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SourceInvoiceSelectionMode SourceInvoiceSelectionMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indebtednessPeriodFromDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? IndebtednessPeriodFromDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indebtednessPeriodToDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? IndebtednessPeriodToDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceInvoices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<InvoiceLinkDto>? SourceInvoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditInvoices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<InvoiceLinkDto>? CreditInvoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("debitNotes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<InvoiceLinkDto>? DebitNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepaymentCalculation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SalesPrepaymentCalculationDto PrepaymentCalculation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceTotalPaymentsCalculation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SalesInvoiceTotalPaymentsCalculationDto InvoiceTotalPaymentsCalculation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LotNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exemptionReasonsByVatCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ExemptionReasonByVatCategoryDto>? ExemptionReasonsByVatCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discounts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DiscountDto>? Discounts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdFromXml")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CreatedFromXml { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("senderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SenderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sender")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Sender { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiver")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Receiver { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountingDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? AccountingDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? PaymentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? InvoiceDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceSentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? InvoiceSentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fineRatePerDay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double FineRatePerDay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountPercentage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatSum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime CreatedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime LastModifiedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modelNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ModelNumber { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<InvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StornoInvoiceMessageDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stornoNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StornoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stornoComment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StornoComment { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static StornoInvoiceMessageDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<StornoInvoiceMessageDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PurchaseInvoiceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Seen")]
        Seen = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Reminded")]
        Reminded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReNotified")]
        ReNotified = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Received")]
        Received = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Deleted")]
        Deleted = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Storno")]
        Storno = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimplePurchaseInvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PurchaseInvoiceStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("globUniqId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? GlobUniqId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirInvoiceStatus CirStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime LastModifiedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirSettledAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double CirSettledAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatNumberFactoringCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatNumberFactoringCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FactoringContractNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelComment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CancelComment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stornoComment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StornoComment { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SimplePurchaseInvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SimplePurchaseInvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CirAssignmentChange
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Assignment")]
        Assignment = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CancelAssignment")]
        CancelAssignment = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesInvoiceStatusChangeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int EventId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("date")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newInvoiceStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SalesInvoiceStatus NewInvoiceStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long SalesInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SubscriptionKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stornoNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StornoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirAssignmentChange")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirAssignmentChange CirAssignmentChange { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSigned")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsSigned { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesInvoiceStatusChangeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesInvoiceStatusChangeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ValueAddedTaxExemptionReasonDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("reasonId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReasonId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("key")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("law")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Law { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("article")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Article { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paragraph")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Paragraph { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("point")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Point { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subpoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Subpoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Text { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("freeFormNote")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FreeFormNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeFrom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime ActiveFrom { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("activeTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? ActiveTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Category { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ValueAddedTaxExemptionReasonDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ValueAddedTaxExemptionReasonDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SalesInvoiceStatusFilter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sent")]
        Sent = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Mistake")]
        Mistake = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Sending")]
        Sending = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Storno")]
        Storno = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SalesInvoicesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("salesInvoiceIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? SalesInvoiceIds { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SalesInvoicesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SalesInvoicesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseInvoiceStatusChangeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("eventId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int EventId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("date")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newInvoiceStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PurchaseInvoiceStatus NewInvoiceStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long PurchaseInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subscriptionKey")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SubscriptionKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stornoNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StornoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirAssignmentChange")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirAssignmentChange CirAssignmentChange { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isSigned")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsSigned { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PurchaseInvoiceStatusChangeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PurchaseInvoiceStatusChangeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AcceptRejectPurchaseInvoice
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accepted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Accepted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AcceptRejectPurchaseInvoice FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AcceptRejectPurchaseInvoice>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangeStatusInvoiceResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PurchaseInvoiceStatus Status { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ChangeStatusInvoiceResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ChangeStatusInvoiceResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AcceptRejectResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("httpStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? HttpStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ChangeStatusInvoiceResponse Invoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Success { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AcceptRejectResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AcceptRejectResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PurchaseInvoiceStatusFilter
    {

        [System.Runtime.Serialization.EnumMember(Value = @"New")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Seen")]
        Seen = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Reminded")]
        Reminded = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ReNotified")]
        ReNotified = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Approved")]
        Approved = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Rejected")]
        Rejected = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Storno")]
        Storno = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseInvoicesDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseInvoiceIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? PurchaseInvoiceIds { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PurchaseInvoicesDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PurchaseInvoicesDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Extension
    {

        [System.Text.Json.Serialization.JsonPropertyName("extensionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExtensionId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("informationName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InformationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("informationContent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InformationContent { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Extension FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Extension>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Header
    {

        [System.Text.Json.Serialization.JsonPropertyName("clientInvoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientInvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InternalInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extensions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Extension>? Extensions { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Header FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Header>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Status
    {

        [System.Text.Json.Serialization.JsonPropertyName("previousInvoiceStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PreviousInvoiceStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newInvoiceStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NewInvoiceStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Status FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Status>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Invoice
    {

        [System.Text.Json.Serialization.JsonPropertyName("header")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Header Header { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Status Status { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Invoice FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Invoice>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Payload
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Invoice Invoice { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Payload FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Payload>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusChangeRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("requestId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RequestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("integratorId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? IntegratorId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizationToken")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AuthorizationToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("payload")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Payload>? Payload { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static StatusChangeRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<StatusChangeRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VatReverseChargeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("purchaseInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PurchaseInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatAmount { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VatReverseChargeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<VatReverseChargeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VatPeriod
    {

        [System.Runtime.Serialization.EnumMember(Value = @"January")]
        January = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"February")]
        February = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"March")]
        March = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"April")]
        April = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"May")]
        May = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Jun")]
        Jun = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"July")]
        July = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"August")]
        August = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"September")]
        September = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"October")]
        October = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"November")]
        November = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"December")]
        December = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FirstQuarter")]
        FirstQuarter = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SecondQuarter")]
        SecondQuarter = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"ThirdQuarter")]
        ThirdQuarter = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FourthQuarter")]
        FourthQuarter = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VatTurnoverAddDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("taxableAmount20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double TaxableAmount20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double TaxAmount20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double TotalAmount20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableAmount10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double TaxableAmount10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double TaxAmount10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double TotalAmount10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? TurnoverDescription10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? TurnoverDescription20 { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VatTurnoverAddDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<VatTurnoverAddDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GroupVatAddDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("year")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Year { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatPeriod VatPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverWithFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public VatTurnoverAddDto TurnoverWithFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverWithoutFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public VatTurnoverAddDto TurnoverWithoutFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("futureTurnover")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public VatTurnoverAddDto FutureTurnover { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatReductionFromPreviousPeriodAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double? VatReductionFromPreviousPeriodAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatIncreaseFromPreviousPeriodAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double? VatIncreaseFromPreviousPeriodAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("calculationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? CalculationNumber { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GroupVatAddDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GroupVatAddDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VatRecordingStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Draft")]
        Draft = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Recorded")]
        Recorded = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Replaced")]
        Replaced = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VatTurnoverDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("vatTurnoverId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int VatTurnoverId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableAmount20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TaxableAmount20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TaxAmount20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalAmount20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxableAmount10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TaxableAmount10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("taxAmount10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TaxAmount10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalAmount10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? TurnoverDescription10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? TurnoverDescription20 { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static VatTurnoverDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<VatTurnoverDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VatRecordVersion
    {

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Second")]
        Second = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GroupVatVersionHistoryDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("calculationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CalculationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingStatus VatRecordingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusChangeDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? StatusChangeDate { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GroupVatVersionHistoryDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GroupVatVersionHistoryDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GroupVatDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("groupVatId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? GroupVatId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CompanyId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("year")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Year { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatPeriod VatPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingStatus VatRecordingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverWithFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public VatTurnoverDto TurnoverWithFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverWithoutFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public VatTurnoverDto TurnoverWithoutFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("futureTurnover")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public VatTurnoverDto FutureTurnover { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatReductionFromPreviousPeriodAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? VatReductionFromPreviousPeriodAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatIncreaseFromPreviousPeriodAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? VatIncreaseFromPreviousPeriodAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? SendDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("calculationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? CalculationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingVersion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordVersion VatRecordingVersion { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusChangeDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? StatusChangeDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groupVatVersionHistory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<GroupVatVersionHistoryDto>? GroupVatVersionHistory { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GroupVatDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GroupVatDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GroupVatListDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("groupVatId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? GroupVatId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CompanyId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("year")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Year { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatPeriod VatPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingStatus VatRecordingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? SendDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingVersion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordVersion VatRecordingVersion { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("calculationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CalculationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime CreatedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusChangeDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? StatusChangeDate { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GroupVatListDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GroupVatListDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VatRecordingDocumentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice")]
        Invoice = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CreditNote")]
        CreditNote = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DebitNote")]
        DebitNote = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PrepaymentInvoice")]
        PrepaymentInvoice = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"InternalAccountForTurnoverOfForeinger")]
        InternalAccountForTurnoverOfForeinger = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"OtherInternalStatement")]
        OtherInternalStatement = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VatDeductionRight
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Partially")]
        Partially = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Fully")]
        Fully = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelatedVatDocumentAddDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("documentNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? DocumentNumber { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RelatedVatDocumentAddDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RelatedVatDocumentAddDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum DocumentDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Inbound")]
        Inbound = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Outbound")]
        Outbound = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum InternalInvoiceOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Turnover")]
        Turnover = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepayment")]
        Prepayment = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IndividualVatAddDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("documentNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? DocumentNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? TurnoverDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? PaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingDocumentType DocumentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TurnoverDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double TurnoverAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatBaseAmount20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double VatBaseAmount20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatBaseAmount10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double VatBaseAmount10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double VatAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0D, 99999999999999.984D)]
        public double TotalAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatDeductionRight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatDeductionRight VatDeductionRight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relatedDocuments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<RelatedVatDocumentAddDto>? RelatedDocuments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentDirection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DocumentDirection DocumentDirection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relatedPartyIdentifier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RelatedPartyIdentifier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("foreignDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ForeignDocument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? TurnoverDescription20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? TurnoverDescription10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatPeriod VatPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalInvoiceOption")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InternalInvoiceOption InternalInvoiceOption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("calculationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? CalculationNumber { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IndividualVatAddDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IndividualVatAddDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RelatedVatDocumentDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("relatedVatDocumentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int RelatedVatDocumentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DocumentNumber { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RelatedVatDocumentDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RelatedVatDocumentDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IndividualVatVersionHistoryDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("calculationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CalculationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingStatus VatRecordingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusChangeDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? StatusChangeDate { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IndividualVatVersionHistoryDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IndividualVatVersionHistoryDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IndividualVatDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("individualVatId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int IndividualVatId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CompanyId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DocumentNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingStatus VatRecordingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? SendDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? TurnoverDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? PaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingDocumentType DocumentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TurnoverDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TurnoverAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatBaseAmount20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatBaseAmount20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatBaseAmount10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatBaseAmount10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatDeductionRight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatDeductionRight VatDeductionRight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relatedDocuments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<RelatedVatDocumentDto>? RelatedDocuments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentDirection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DocumentDirection DocumentDirection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relatedPartyIdentifier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RelatedPartyIdentifier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("foreignDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ForeignDocument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription20")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? TurnoverDescription20 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverDescription10")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? TurnoverDescription10 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatPeriod VatPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalInvoiceOption")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InternalInvoiceOption InternalInvoiceOption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("calculationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2000)]
        public string? CalculationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingVersion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordVersion VatRecordingVersion { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusChangeDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? StatusChangeDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("individualVatHistory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<IndividualVatVersionHistoryDto>? IndividualVatHistory { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IndividualVatDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IndividualVatDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IndividualVatListDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("individualVatId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int IndividualVatId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DocumentNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingStatus VatRecordingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sendDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? SendDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordingDocumentType DocumentType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("turnoverAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TurnoverAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatDeductionRight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatDeductionRight VatDeductionRight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentDirection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DocumentDirection DocumentDirection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relatedPartyIdentifier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RelatedPartyIdentifier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("foreignDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ForeignDocument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRecordingVersion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatRecordVersion VatRecordingVersion { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("calculationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CalculationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalInvoiceOption")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InternalInvoiceOption InternalInvoiceOption { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatPeriod VatPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime CreatedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusChangeDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? StatusChangeDate { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IndividualVatListDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IndividualVatListDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CirTicketStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Canceled")]
        Canceled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Solved")]
        Solved = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Unsolved")]
        Unsolved = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CirResourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice")]
        Invoice = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Settlement")]
        Settlement = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CirTicketChangeDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("propertyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PropertyName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oldValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OldValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NewValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dateChanged")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime DateChanged { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ChangeUser User { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceDesk")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ServiceDesk { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CirTicketChangeDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CirTicketChangeDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CirTicketHistoryDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("cirTicketId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long CirTicketId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirTicketChanges")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CirTicketChangeDto>? CirTicketChanges { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CirTicketHistoryDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CirTicketHistoryDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CirTicketDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("organizationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int OrganizationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userComment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UserComment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operatorComment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object? OperatorComment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirTicketStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime CreationDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("closingDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? ClosingDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryCyr")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CategoryCyr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("organizationName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrganizationName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resourceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirResourceType ResourceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirTicketHistory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CirTicketHistoryDto CirTicketHistory { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CirTicketDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CirTicketDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CirTicketListResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tickets")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CirTicketDto>? Tickets { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CirTicketListResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CirTicketListResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CirTicketSortEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CirId")]
        CirId = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyNumber")]
        CompanyNumber = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"OrganizationName")]
        OrganizationName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Data")]
        Data = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CreationDate")]
        CreationDate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosingDate")]
        ClosingDate = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SortDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Desc")]
        Desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CirTicketSortEnumSortItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("sortColumn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirTicketSortEnum SortColumn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sortDirection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SortDirection SortDirection { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CirTicketSortEnumSortItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CirTicketSortEnumSortItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PagingOptions
    {

        [System.Text.Json.Serialization.JsonPropertyName("pageIndex")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PageIndex { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PageSize { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PagingOptions FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PagingOptions>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CirTicketSearchEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CirId")]
        CirId = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyNumber")]
        CompanyNumber = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CompanyName")]
        CompanyName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Data")]
        Data = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CreatinDateFrom")]
        CreatinDateFrom = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CreatinDateTo")]
        CreatinDateTo = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosingDateFrom")]
        ClosingDateFrom = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ClosingDateTo")]
        ClosingDateTo = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Status")]
        Status = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"IssueType")]
        IssueType = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CirTicketSearchEnumRestrictionItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirTicketSearchEnum Field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("values")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string>? Values { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CirTicketSearchEnumRestrictionItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CirTicketSearchEnumRestrictionItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CirTicketSearchParameter
    {

        [System.Text.Json.Serialization.JsonPropertyName("sortItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CirTicketSortEnumSortItem>? SortItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pagingOptions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PagingOptions PagingOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restrictions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CirTicketSearchEnumRestrictionItem>? Restrictions { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CirTicketSearchParameter FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CirTicketSearchParameter>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CirTicketCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Information")]
        Information = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Validity")]
        Validity = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Settlement")]
        Settlement = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancellation")]
        Cancellation = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddCirTicketRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("amount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Amount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userComment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UserComment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resourceType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirResourceType ResourceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirTicketCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirTicketCategory CirTicketCategory { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AddCirTicketRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AddCirTicketRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ESortColumn
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceId")]
        Invoice_InvoiceId = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_SenderName")]
        Invoice_SenderName = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_ReceiverName")]
        Invoice_ReceiverName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_AccountingDateUtc")]
        Invoice_AccountingDateUtc = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceDateUtc")]
        Invoice_InvoiceDateUtc = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_PaymentDateUtc")]
        Invoice_PaymentDateUtc = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_SumWithoutVat")]
        Invoice_SumWithoutVat = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_VatRate")]
        Invoice_VatRate = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_VatSum")]
        Invoice_VatSum = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_SumWithVat")]
        Invoice_SumWithVat = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_ReferenceNumber")]
        Invoice_ReferenceNumber = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_Description")]
        Invoice_Description = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_OrderNumber")]
        Invoice_OrderNumber = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceNumber")]
        Invoice_InvoiceNumber = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_Status")]
        Invoice_Status = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_ServiceId")]
        Invoice_ServiceId = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_ChannelId")]
        Invoice_ChannelId = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_ChannelAdress")]
        Invoice_ChannelAdress = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_DocumentType")]
        Invoice_DocumentType = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceSentDateUtc")]
        Invoice_InvoiceSentDateUtc = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceType")]
        Invoice_InvoiceType = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_LastModifiedUtc")]
        Invoice_LastModifiedUtc = 21,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SortItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("sortColumn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ESortColumn SortColumn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sortDirection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SortDirection SortDirection { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SortItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SortItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ERestrictionField
    {

        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_Sender_Like")]
        Invoice_Sender_Like = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_Receiver_Like")]
        Invoice_Receiver_Like = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceNumber_Like")]
        Invoice_InvoiceNumber_Like = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceNumber_Equals")]
        Invoice_InvoiceNumber_Equals = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_AccountingDateUtc_Before")]
        Invoice_AccountingDateUtc_Before = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_AccountingDateUtc_After")]
        Invoice_AccountingDateUtc_After = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceSentDateUtc_Before")]
        Invoice_InvoiceSentDateUtc_Before = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceSentDateUtc_After")]
        Invoice_InvoiceSentDateUtc_After = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_PaymentDateUtc_Before")]
        Invoice_PaymentDateUtc_Before = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_PaymentDateUtc_After")]
        Invoice_PaymentDateUtc_After = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_ReferenceNumber_Like")]
        Invoice_ReferenceNumber_Like = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_Description_Like")]
        Invoice_Description_Like = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_Note_Like")]
        Invoice_Note_Like = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_OrderNumber_Like")]
        Invoice_OrderNumber_Like = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"Row_Code_Like")]
        Row_Code_Like = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"Row_Description_Like")]
        Row_Description_Like = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"Row_Unit_Like")]
        Row_Unit_Like = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_Status")]
        Invoice_Status = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_ServiceId")]
        Invoice_ServiceId = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_Channel")]
        Invoice_Channel = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_ChannelAdress")]
        Invoice_ChannelAdress = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_InvoiceType")]
        Invoice_InvoiceType = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"Invoice_SentToCir")]
        Invoice_SentToCir = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"VatRecording_Status")]
        VatRecording_Status = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"VatRecording_DocumentNumber_CalculationNumber")]
        VatRecording_DocumentNumber_CalculationNumber = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"VatRecording_DocumentType")]
        VatRecording_DocumentType = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"VatRecording_StatusChangeDate_Before")]
        VatRecording_StatusChangeDate_Before = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"VatRecording_StatusChangeDate_After")]
        VatRecording_StatusChangeDate_After = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"VatRecording_CalculationNumber")]
        VatRecording_CalculationNumber = 29,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RestrictionItem
    {

        [System.Text.Json.Serialization.JsonPropertyName("field")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ERestrictionField Field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("values")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string>? Values { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RestrictionItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RestrictionItem>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchParameter
    {

        [System.Text.Json.Serialization.JsonPropertyName("sortItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SortItem>? SortItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pagingOptions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PagingOptions PagingOptions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("restrictions")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<RestrictionItem>? Restrictions { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SearchParameter FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SearchParameter>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum InvoiceTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Regular")]
        Regular = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Credit")]
        Credit = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DebitNote")]
        DebitNote = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Prepayment")]
        Prepayment = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SmallInvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("receiverId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReceiverId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverIsDeleted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReceiverIsDeleted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Channel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("channelAdress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ChannelAdress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceProvider")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceProvider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("errorCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ErrorCodes ErrorCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SalesInvoiceStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirInvoiceStatus CirStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InvoiceTypes InvoiceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ispAcceptedToRepresentCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IspAcceptedToRepresentCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ispName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? IspName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalToPay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TotalToPay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("senderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SenderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sender")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Sender { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiver")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Receiver { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountingDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? AccountingDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? PaymentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? InvoiceDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceSentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? InvoiceSentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fineRatePerDay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double FineRatePerDay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountPercentage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatSum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime CreatedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime LastModifiedUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("version")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modelNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ModelNumber { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SmallInvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SmallInvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchInvoiceResultDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalSum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SmallInvoiceDto>? Invoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RequestId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SearchInvoiceResultDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SearchInvoiceResultDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomFields
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DocumentType")]
        DocumentType = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseInvoiceCustomFieldDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("customField")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomFields CustomField { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Value { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PurchaseInvoiceCustomFieldDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PurchaseInvoiceCustomFieldDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SmallPurchaseInvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("senderApplicationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SenderApplicationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("senderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SenderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReceiverId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverUserAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReceiverUserAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PurchaseInvoiceStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountingDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime AccountingDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? InvoiceDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceSentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime InvoiceSentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? PaymentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fineRatePerDay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double FineRatePerDay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountPercentage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatSum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceFilePath")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceFilePath { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sender")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Sender { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiver")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Receiver { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("duplicate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Duplicate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDeleted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PurchaseInvoiceCustomFieldDto>? CustomFields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceMessage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? InvoiceMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptRejectMessage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? AcceptRejectMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirInvoiceStatus CirStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InvoiceTypes InvoiceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ispAcceptedToRepresentCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IspAcceptedToRepresentCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ispName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? IspName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalToPay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TotalToPay { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SmallPurchaseInvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SmallPurchaseInvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchPurchaseInvoiceResultDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalSum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SmallPurchaseInvoiceDto>? Invoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RequestId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SearchPurchaseInvoiceResultDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SearchPurchaseInvoiceResultDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseFileDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Extension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mainPdf")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool MainPdf { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mainXml")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool MainXml { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isFitekInZip")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFitekInZip { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isLink")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsLink { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("link")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Link { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PurchaseFileDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PurchaseFileDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseSelectedPrepaymentInvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepayedAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PrepayedAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("prepayedVAT")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double PrepayedVAT { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currency")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Currency { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime PaymentDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceSentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime InvoiceSentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contractId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ContractId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("outOfEfaktura")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OutOfEfaktura { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PurchaseSelectedPrepaymentInvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PurchaseSelectedPrepaymentInvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VatPointDates
    {

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IssuingDate")]
        IssuingDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DeliveryDate")]
        DeliveryDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"PaymentDate")]
        PaymentDate = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SourceInvoiceOutOfEFakturaDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("sourceInvoiceOutOfEFakturaId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long SourceInvoiceOutOfEFakturaId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceInvoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SourceInvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceGlobUniqId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceGlobUniqId { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SourceInvoiceOutOfEFakturaDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SourceInvoiceOutOfEFakturaDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InvoiceTotalVatPerRateCalculationDomesticDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("baseSumForPaymentVatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double BaseSumForPaymentVatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPaymentPerRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatPaymentPerRate { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InvoiceTotalVatPerRateCalculationDomesticDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<InvoiceTotalVatPerRateCalculationDomesticDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class InvoiceTotalVatPaymentsCalculationDomesticDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("vatPerRateCalculations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<InvoiceTotalVatPerRateCalculationDomesticDto>? VatPerRateCalculations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalVatPaymentsDomestic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalVatPaymentsDomestic { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InvoiceTotalVatPaymentsCalculationDomesticDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<InvoiceTotalVatPaymentsCalculationDomesticDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PurchaseInvoiceDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long InvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("senderApplicationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SenderApplicationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("senderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SenderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int ReceiverId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicPurchaseContractSignerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PublicPurchaseContractSignerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverUserAccountId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ReceiverUserAccountId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PurchaseInvoiceStatus Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salesStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SalesInvoiceStatus SalesStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("senderReceiverContractNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SenderReceiverContractNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountingDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime AccountingDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? InvoiceDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paymentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime PaymentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceSentDateUtc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime InvoiceSentDateUtc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("referenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReferenceNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modelNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ModelNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fineRatePerDay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double FineRatePerDay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currencyName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CurrencyName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountPercentage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountPercentage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("discountAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double DiscountAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithoutVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithoutVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double VatSum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sumWithVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double SumWithVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPayments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TotalPayments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ServiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceFilePath")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InvoiceFilePath { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sender")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Sender { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiver")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Receiver { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicPurchaseContractSigner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PublicPurchaseContractSigner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("duplicate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Duplicate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDeleted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDeleted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("files")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PurchaseFileDto>? Files { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("customFields")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PurchaseInvoiceCustomFieldDto>? CustomFields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purchaseSelectedPrepaymentInvoices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PurchaseSelectedPrepaymentInvoiceDto>? PurchaseSelectedPrepaymentInvoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceMessage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? InvoiceMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acceptRejectMessage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string? AcceptRejectMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirAmountChangeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirAmountChangeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CirInvoiceStatus CirStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirHistory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CirHistoryDto CirHistory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirAssignationHistory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public InvoiceHistoryDto CirAssignationHistory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cirSettledAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double CirSettledAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCreditInvoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCreditInvoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isDebitNote")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsDebitNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cancelInvoiceMessage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CancelInvoiceMessage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stornoNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StornoNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isPrepaymentInvoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsPrepaymentInvoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addVatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? AddVatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverCalculatedVatRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ReceiverCalculatedVatRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalToPay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TotalToPay { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatPointDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public VatPointDates VatPointDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatNumberFactoringCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatNumberFactoringCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("factoringContractNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FactoringContractNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceInvoiceSelectionMode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SourceInvoiceSelectionMode SourceInvoiceSelectionMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indebtednessPeriodFromDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime IndebtednessPeriodFromDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("indebtednessPeriodToDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime IndebtednessPeriodToDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceInvoices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<InvoiceLinkDto>? SourceInvoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sourceInvoicesOutOfEfaktura")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<SourceInvoiceOutOfEFakturaDto>? SourceInvoicesOutOfEfaktura { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invoiceTotalVatPaymentsCalculationDomestic")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public InvoiceTotalVatPaymentsCalculationDomesticDto InvoiceTotalVatPaymentsCalculationDomestic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isRelatedToInvoicesFromPreviosPeriod")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsRelatedToInvoicesFromPreviosPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("creditInvoices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<InvoiceLinkDto>? CreditInvoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("debitNotes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<InvoiceLinkDto>? DebitNotes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ispAcceptedToRepresentCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IspAcceptedToRepresentCompany { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ispName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? IspName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lotNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LotNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalRoutingNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? InternalRoutingNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("receiverCalculatesVat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ReceiverCalculatesVat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("objectIdentifier")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ObjectIdentifier { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdFromXml")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CreatedFromXml { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PurchaseInvoiceDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PurchaseInvoiceDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AcceptRejectPurchaseInvoiceByCirInvoiceId
    {

        [System.Text.Json.Serialization.JsonPropertyName("cirInvoiceId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CirInvoiceId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accepted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Accepted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("comment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Comment { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AcceptRejectPurchaseInvoiceByCirInvoiceId FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AcceptRejectPurchaseInvoiceByCirInvoiceId>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AcceptRejectPurchaseInvoiceResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("invoice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ChangeStatusInvoiceResponse Invoice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("success")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Success { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AcceptRejectPurchaseInvoiceResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AcceptRejectPurchaseInvoiceResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanyAccountIdentificationDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("registrationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RegistrationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jbkjs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Jbkjs { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("vatNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? VatNumber { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CompanyAccountIdentificationDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CompanyAccountIdentificationDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompanyAccountOnEfAkturaDto
    {

        [System.Text.Json.Serialization.JsonPropertyName("eFakturaRegisteredCompany")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool EFakturaRegisteredCompany { get; set; } = default!;

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CompanyAccountOnEfAkturaDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CompanyAccountOnEfAkturaDto>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Response
    {
        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public Response(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            StatusCode = statusCode;
            Headers = headers;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Response<TResult> : Response
    {
        public TResult Result { get; private set; }

        public Response(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result)
            : base(statusCode, headers)
        {
            Result = result;
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EFakturaException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public EFakturaException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EFakturaException<TResult> : EFakturaException
    {
        public TResult Result { get; private set; }

        public EFakturaException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603